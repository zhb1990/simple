// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_server.proto

#include "msg_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR s_service_info::s_service_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.tp_)*/0
  , /*decltype(_impl_.online_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_infoDefaultTypeInternal() {}
  union {
    s_service_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_infoDefaultTypeInternal _s_service_info_default_instance_;
PROTOBUF_CONSTEXPR s_gate_address::s_gate_address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_addressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_addressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_addressDefaultTypeInternal() {}
  union {
    s_gate_address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_addressDefaultTypeInternal _s_gate_address_default_instance_;
PROTOBUF_CONSTEXPR s_gate_info::s_gate_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_infoDefaultTypeInternal() {}
  union {
    s_gate_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_infoDefaultTypeInternal _s_gate_info_default_instance_;
PROTOBUF_CONSTEXPR s_gate_register_req::s_gate_register_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_register_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_register_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_register_reqDefaultTypeInternal() {}
  union {
    s_gate_register_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_register_reqDefaultTypeInternal _s_gate_register_req_default_instance_;
PROTOBUF_CONSTEXPR s_gate_register_ack::s_gate_register_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gates_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_register_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_register_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_register_ackDefaultTypeInternal() {}
  union {
    s_gate_register_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_register_ackDefaultTypeInternal _s_gate_register_ack_default_instance_;
PROTOBUF_CONSTEXPR s_gate_register_brd::s_gate_register_brd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_register_brdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_register_brdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_register_brdDefaultTypeInternal() {}
  union {
    s_gate_register_brd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_register_brdDefaultTypeInternal _s_gate_register_brd_default_instance_;
PROTOBUF_CONSTEXPR s_service_update_req::s_service_update_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_update_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_update_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_update_reqDefaultTypeInternal() {}
  union {
    s_service_update_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_update_reqDefaultTypeInternal _s_service_update_req_default_instance_;
PROTOBUF_CONSTEXPR s_service_shm::s_service_shm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_shmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_shmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_shmDefaultTypeInternal() {}
  union {
    s_service_shm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_shmDefaultTypeInternal _s_service_shm_default_instance_;
PROTOBUF_CONSTEXPR s_service_register_req::s_service_register_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shm_)*/{}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.channel_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_register_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_register_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_register_reqDefaultTypeInternal() {}
  union {
    s_service_register_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_register_reqDefaultTypeInternal _s_service_register_req_default_instance_;
PROTOBUF_CONSTEXPR s_service_register_ack::s_service_register_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.gate_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_register_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_register_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_register_ackDefaultTypeInternal() {}
  union {
    s_service_register_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_register_ackDefaultTypeInternal _s_service_register_ack_default_instance_;
PROTOBUF_CONSTEXPR s_gate_forward_brd::s_gate_forward_brd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/0u
  , /*decltype(_impl_.to_)*/0u
  , /*decltype(_impl_.session_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_gate_forward_brdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_gate_forward_brdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_gate_forward_brdDefaultTypeInternal() {}
  union {
    s_gate_forward_brd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_gate_forward_brdDefaultTypeInternal _s_gate_forward_brd_default_instance_;
PROTOBUF_CONSTEXPR s_service_subscribe_req::s_service_subscribe_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_subscribe_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_subscribe_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_subscribe_reqDefaultTypeInternal() {}
  union {
    s_service_subscribe_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_subscribe_reqDefaultTypeInternal _s_service_subscribe_req_default_instance_;
PROTOBUF_CONSTEXPR s_service_subscribe_ack::s_service_subscribe_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_subscribe_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_subscribe_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_subscribe_ackDefaultTypeInternal() {}
  union {
    s_service_subscribe_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_subscribe_ackDefaultTypeInternal _s_service_subscribe_ack_default_instance_;
PROTOBUF_CONSTEXPR s_service_subscribe_brd::s_service_subscribe_brd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_service_subscribe_brdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_service_subscribe_brdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_service_subscribe_brdDefaultTypeInternal() {}
  union {
    s_service_subscribe_brd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_service_subscribe_brdDefaultTypeInternal _s_service_subscribe_brd_default_instance_;
PROTOBUF_CONSTEXPR s_ping_req::s_ping_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.t1_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_ping_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_ping_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_ping_reqDefaultTypeInternal() {}
  union {
    s_ping_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_ping_reqDefaultTypeInternal _s_ping_req_default_instance_;
PROTOBUF_CONSTEXPR s_ping_ack::s_ping_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.t1_)*/int64_t{0}
  , /*decltype(_impl_.t2_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_ping_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_ping_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_ping_ackDefaultTypeInternal() {}
  union {
    s_ping_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_ping_ackDefaultTypeInternal _s_ping_ack_default_instance_;
PROTOBUF_CONSTEXPR s_client_forward_brd::s_client_forward_brd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gate_)*/0u
  , /*decltype(_impl_.socket_)*/0u
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_client_forward_brdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_client_forward_brdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_client_forward_brdDefaultTypeInternal() {}
  union {
    s_client_forward_brd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_client_forward_brdDefaultTypeInternal _s_client_forward_brd_default_instance_;
PROTOBUF_CONSTEXPR s_kick_client_req::s_kick_client_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.socket_)*/0u
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct s_kick_client_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR s_kick_client_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~s_kick_client_reqDefaultTypeInternal() {}
  union {
    s_kick_client_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 s_kick_client_reqDefaultTypeInternal _s_kick_client_req_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_msg_5fserver_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fserver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_5fserver_2eproto = nullptr;

const uint32_t TableStruct_msg_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_info, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_info, _impl_.tp_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_info, _impl_.online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_address, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_address, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_info, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_info, _impl_.services_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_info, _impl_.addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_req, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_ack, _impl_.gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_brd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_register_brd, _impl_.gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_update_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_update_req, _impl_.services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_shm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_shm, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_shm, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_req, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_req, _impl_.channel_size_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_req, _impl_.shm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_register_ack, _impl_.gate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _impl_.session_),
  PROTOBUF_FIELD_OFFSET(::game::s_gate_forward_brd, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_req, _impl_.tp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_ack, _impl_.services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_brd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_service_subscribe_brd, _impl_.services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_ping_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_ping_req, _impl_.t1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_ping_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_ping_ack, _impl_.t1_),
  PROTOBUF_FIELD_OFFSET(::game::s_ping_ack, _impl_.t2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_client_forward_brd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_client_forward_brd, _impl_.gate_),
  PROTOBUF_FIELD_OFFSET(::game::s_client_forward_brd, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::game::s_client_forward_brd, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::game::s_client_forward_brd, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::s_kick_client_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::s_kick_client_req, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::game::s_kick_client_req, _impl_.userid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::s_service_info)},
  { 9, -1, -1, sizeof(::game::s_gate_address)},
  { 17, -1, -1, sizeof(::game::s_gate_info)},
  { 26, -1, -1, sizeof(::game::s_gate_register_req)},
  { 33, -1, -1, sizeof(::game::s_gate_register_ack)},
  { 41, -1, -1, sizeof(::game::s_gate_register_brd)},
  { 48, -1, -1, sizeof(::game::s_service_update_req)},
  { 55, -1, -1, sizeof(::game::s_service_shm)},
  { 63, -1, -1, sizeof(::game::s_service_register_req)},
  { 72, -1, -1, sizeof(::game::s_service_register_ack)},
  { 80, -1, -1, sizeof(::game::s_gate_forward_brd)},
  { 91, -1, -1, sizeof(::game::s_service_subscribe_req)},
  { 98, -1, -1, sizeof(::game::s_service_subscribe_ack)},
  { 106, -1, -1, sizeof(::game::s_service_subscribe_brd)},
  { 113, -1, -1, sizeof(::game::s_ping_req)},
  { 120, -1, -1, sizeof(::game::s_ping_ack)},
  { 128, -1, -1, sizeof(::game::s_client_forward_brd)},
  { 138, -1, -1, sizeof(::game::s_kick_client_req)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_s_service_info_default_instance_._instance,
  &::game::_s_gate_address_default_instance_._instance,
  &::game::_s_gate_info_default_instance_._instance,
  &::game::_s_gate_register_req_default_instance_._instance,
  &::game::_s_gate_register_ack_default_instance_._instance,
  &::game::_s_gate_register_brd_default_instance_._instance,
  &::game::_s_service_update_req_default_instance_._instance,
  &::game::_s_service_shm_default_instance_._instance,
  &::game::_s_service_register_req_default_instance_._instance,
  &::game::_s_service_register_ack_default_instance_._instance,
  &::game::_s_gate_forward_brd_default_instance_._instance,
  &::game::_s_service_subscribe_req_default_instance_._instance,
  &::game::_s_service_subscribe_ack_default_instance_._instance,
  &::game::_s_service_subscribe_brd_default_instance_._instance,
  &::game::_s_ping_req_default_instance_._instance,
  &::game::_s_ping_ack_default_instance_._instance,
  &::game::_s_client_forward_brd_default_instance_._instance,
  &::game::_s_kick_client_req_default_instance_._instance,
};

const char descriptor_table_protodef_msg_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020msg_server.proto\022\004game\032\016msg_base.proto"
  "\"L\n\016s_service_info\022\n\n\002id\030\001 \001(\r\022\036\n\002tp\030\002 \001"
  "(\0162\022.game.service_type\022\016\n\006online\030\003 \001(\010\","
  "\n\016s_gate_address\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002"
  " \001(\t\"j\n\013s_gate_info\022\n\n\002id\030\001 \001(\r\022&\n\010servi"
  "ces\030\002 \003(\0132\024.game.s_service_info\022\'\n\taddre"
  "sses\030\003 \003(\0132\024.game.s_gate_address\"6\n\023s_ga"
  "te_register_req\022\037\n\004info\030\001 \001(\0132\021.game.s_g"
  "ate_info\"Y\n\023s_gate_register_ack\022 \n\006resul"
  "t\030\001 \001(\0132\020.game.ack_result\022 \n\005gates\030\002 \003(\013"
  "2\021.game.s_gate_info\"7\n\023s_gate_register_b"
  "rd\022 \n\005gates\030\001 \003(\0132\021.game.s_gate_info\">\n\024"
  "s_service_update_req\022&\n\010services\030\001 \003(\0132\024"
  ".game.s_service_info\"+\n\rs_service_shm\022\014\n"
  "\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\r\"t\n\026s_service_r"
  "egister_req\022\"\n\004info\030\001 \001(\0132\024.game.s_servi"
  "ce_info\022\024\n\014channel_size\030\002 \001(\r\022 \n\003shm\030\003 \003"
  "(\0132\023.game.s_service_shm\"H\n\026s_service_reg"
  "ister_ack\022 \n\006result\030\001 \001(\0132\020.game.ack_res"
  "ult\022\014\n\004gate\030\002 \001(\r\"Y\n\022s_gate_forward_brd\022"
  "\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\017\n"
  "\007session\030\004 \001(\004\022\014\n\004data\030\005 \001(\014\"9\n\027s_servic"
  "e_subscribe_req\022\036\n\002tp\030\001 \001(\0162\022.game.servi"
  "ce_type\"c\n\027s_service_subscribe_ack\022 \n\006re"
  "sult\030\001 \001(\0132\020.game.ack_result\022&\n\010services"
  "\030\002 \003(\0132\024.game.s_service_info\"A\n\027s_servic"
  "e_subscribe_brd\022&\n\010services\030\001 \003(\0132\024.game"
  ".s_service_info\"\030\n\ns_ping_req\022\n\n\002t1\030\001 \001("
  "\003\"$\n\ns_ping_ack\022\n\n\002t1\030\001 \001(\003\022\n\n\002t2\030\002 \001(\003\""
  "R\n\024s_client_forward_brd\022\014\n\004gate\030\001 \001(\r\022\016\n"
  "\006socket\030\002 \001(\r\022\016\n\006userid\030\003 \001(\005\022\014\n\004data\030\004 "
  "\001(\014\"3\n\021s_kick_client_req\022\016\n\006socket\030\002 \001(\r"
  "\022\016\n\006userid\030\003 \001(\005*\264\001\n\014service_type\022\022\n\016st_"
  "gate_master\020\000\022\013\n\007st_gate\020\001\022\014\n\010st_proxy\020\002"
  "\022\014\n\010st_login\020\003\022\017\n\013st_db_proxy\020\004\022\014\n\010st_lo"
  "gic\020\005\022\023\n\017st_logic_master\020\006\022\014\n\010st_match\020\007"
  "\022\013\n\007st_room\020\010\022\r\n\tst_center\020\t\022\t\n\005st_ai\020\nb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_5fserver_2eproto_deps[1] = {
  &::descriptor_table_msg_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fserver_2eproto = {
    false, false, 1487, descriptor_table_protodef_msg_5fserver_2eproto,
    "msg_server.proto",
    &descriptor_table_msg_5fserver_2eproto_once, descriptor_table_msg_5fserver_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_msg_5fserver_2eproto::offsets,
    file_level_metadata_msg_5fserver_2eproto, file_level_enum_descriptors_msg_5fserver_2eproto,
    file_level_service_descriptors_msg_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fserver_2eproto_getter() {
  return &descriptor_table_msg_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fserver_2eproto(&descriptor_table_msg_5fserver_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* service_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fserver_2eproto);
  return file_level_enum_descriptors_msg_5fserver_2eproto[0];
}
bool service_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class s_service_info::_Internal {
 public:
};

s_service_info::s_service_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_info)
}
s_service_info::s_service_info(const s_service_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.tp_){}
    , decltype(_impl_.online_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.online_));
  // @@protoc_insertion_point(copy_constructor:game.s_service_info)
}

inline void s_service_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.tp_){0}
    , decltype(_impl_.online_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_info::~s_service_info() {
  // @@protoc_insertion_point(destructor:game.s_service_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s_service_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_info::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.online_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.service_type tp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tp(static_cast<::game::service_type>(val));
        } else
          goto handle_unusual;
        continue;
      // bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .game.service_type tp = 2;
  if (this->_internal_tp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tp(), target);
  }

  // bool online = 3;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_info)
  return target;
}

size_t s_service_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .game.service_type tp = 2;
  if (this->_internal_tp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tp());
  }

  // bool online = 3;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_info::GetClassData() const { return &_class_data_; }


void s_service_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_info*>(&to_msg);
  auto& from = static_cast<const s_service_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_tp() != 0) {
    _this->_internal_set_tp(from._internal_tp());
  }
  if (from._internal_online() != 0) {
    _this->_internal_set_online(from._internal_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_info::CopyFrom(const s_service_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_info::IsInitialized() const {
  return true;
}

void s_service_info::InternalSwap(s_service_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_service_info, _impl_.online_)
      + sizeof(s_service_info::_impl_.online_)
      - PROTOBUF_FIELD_OFFSET(s_service_info, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[0]);
}

// ===================================================================

class s_gate_address::_Internal {
 public:
};

s_gate_address::s_gate_address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_address)
}
s_gate_address::s_gate_address(const s_gate_address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.s_gate_address)
}

inline void s_gate_address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

s_gate_address::~s_gate_address() {
  // @@protoc_insertion_point(destructor:game.s_gate_address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.port_.Destroy();
}

void s_gate_address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_address::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.s_gate_address.host"));
        } else
          goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.s_gate_address.port"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.s_gate_address.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.s_gate_address.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_address)
  return target;
}

size_t s_gate_address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_address::GetClassData() const { return &_class_data_; }


void s_gate_address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_address*>(&to_msg);
  auto& from = static_cast<const s_gate_address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_address::CopyFrom(const s_gate_address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_address::IsInitialized() const {
  return true;
}

void s_gate_address::InternalSwap(s_gate_address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[1]);
}

// ===================================================================

class s_gate_info::_Internal {
 public:
};

s_gate_info::s_gate_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_info)
}
s_gate_info::s_gate_info(const s_gate_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , decltype(_impl_.addresses_){from._impl_.addresses_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:game.s_gate_info)
}

inline void s_gate_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , decltype(_impl_.addresses_){arena}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_gate_info::~s_gate_info() {
  // @@protoc_insertion_point(destructor:game.s_gate_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
  _impl_.addresses_.~RepeatedPtrField();
}

void s_gate_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_info::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  _impl_.addresses_.Clear();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.s_service_info services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .game.s_gate_address addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .game.s_service_info services = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .game.s_gate_address addresses = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_info)
  return target;
}

size_t s_gate_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 2;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .game.s_gate_address addresses = 3;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->_impl_.addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_info::GetClassData() const { return &_class_data_; }


void s_gate_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_info*>(&to_msg);
  auto& from = static_cast<const s_gate_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  _this->_impl_.addresses_.MergeFrom(from._impl_.addresses_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_info::CopyFrom(const s_gate_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_info::IsInitialized() const {
  return true;
}

void s_gate_info::InternalSwap(s_gate_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  _impl_.addresses_.InternalSwap(&other->_impl_.addresses_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[2]);
}

// ===================================================================

class s_gate_register_req::_Internal {
 public:
  static const ::game::s_gate_info& info(const s_gate_register_req* msg);
};

const ::game::s_gate_info&
s_gate_register_req::_Internal::info(const s_gate_register_req* msg) {
  return *msg->_impl_.info_;
}
s_gate_register_req::s_gate_register_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_register_req)
}
s_gate_register_req::s_gate_register_req(const s_gate_register_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_register_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::game::s_gate_info(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:game.s_gate_register_req)
}

inline void s_gate_register_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_gate_register_req::~s_gate_register_req() {
  // @@protoc_insertion_point(destructor:game.s_gate_register_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_register_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void s_gate_register_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_register_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_register_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_register_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.s_gate_info info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_register_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_register_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.s_gate_info info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_register_req)
  return target;
}

size_t s_gate_register_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_register_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.s_gate_info info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_register_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_register_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_register_req::GetClassData() const { return &_class_data_; }


void s_gate_register_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_register_req*>(&to_msg);
  auto& from = static_cast<const s_gate_register_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_register_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::game::s_gate_info::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_register_req::CopyFrom(const s_gate_register_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_register_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_register_req::IsInitialized() const {
  return true;
}

void s_gate_register_req::InternalSwap(s_gate_register_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_register_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[3]);
}

// ===================================================================

class s_gate_register_ack::_Internal {
 public:
  static const ::game::ack_result& result(const s_gate_register_ack* msg);
};

const ::game::ack_result&
s_gate_register_ack::_Internal::result(const s_gate_register_ack* msg) {
  return *msg->_impl_.result_;
}
void s_gate_register_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
s_gate_register_ack::s_gate_register_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_register_ack)
}
s_gate_register_ack::s_gate_register_ack(const s_gate_register_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_register_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){from._impl_.gates_}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:game.s_gate_register_ack)
}

inline void s_gate_register_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){arena}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_gate_register_ack::~s_gate_register_ack() {
  // @@protoc_insertion_point(destructor:game.s_gate_register_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_register_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gates_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void s_gate_register_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_register_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_register_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_register_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.s_gate_info gates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_register_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_register_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .game.s_gate_info gates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gates_size()); i < n; i++) {
    const auto& repfield = this->_internal_gates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_register_ack)
  return target;
}

size_t s_gate_register_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_register_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_gate_info gates = 2;
  total_size += 1UL * this->_internal_gates_size();
  for (const auto& msg : this->_impl_.gates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_register_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_register_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_register_ack::GetClassData() const { return &_class_data_; }


void s_gate_register_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_register_ack*>(&to_msg);
  auto& from = static_cast<const s_gate_register_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_register_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gates_.MergeFrom(from._impl_.gates_);
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_register_ack::CopyFrom(const s_gate_register_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_register_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_register_ack::IsInitialized() const {
  return true;
}

void s_gate_register_ack::InternalSwap(s_gate_register_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gates_.InternalSwap(&other->_impl_.gates_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_register_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[4]);
}

// ===================================================================

class s_gate_register_brd::_Internal {
 public:
};

s_gate_register_brd::s_gate_register_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_register_brd)
}
s_gate_register_brd::s_gate_register_brd(const s_gate_register_brd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_register_brd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){from._impl_.gates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.s_gate_register_brd)
}

inline void s_gate_register_brd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_gate_register_brd::~s_gate_register_brd() {
  // @@protoc_insertion_point(destructor:game.s_gate_register_brd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_register_brd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gates_.~RepeatedPtrField();
}

void s_gate_register_brd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_register_brd::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_register_brd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_register_brd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.s_gate_info gates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_register_brd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_register_brd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.s_gate_info gates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gates_size()); i < n; i++) {
    const auto& repfield = this->_internal_gates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_register_brd)
  return target;
}

size_t s_gate_register_brd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_register_brd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_gate_info gates = 1;
  total_size += 1UL * this->_internal_gates_size();
  for (const auto& msg : this->_impl_.gates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_register_brd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_register_brd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_register_brd::GetClassData() const { return &_class_data_; }


void s_gate_register_brd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_register_brd*>(&to_msg);
  auto& from = static_cast<const s_gate_register_brd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_register_brd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gates_.MergeFrom(from._impl_.gates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_register_brd::CopyFrom(const s_gate_register_brd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_register_brd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_register_brd::IsInitialized() const {
  return true;
}

void s_gate_register_brd::InternalSwap(s_gate_register_brd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gates_.InternalSwap(&other->_impl_.gates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_register_brd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[5]);
}

// ===================================================================

class s_service_update_req::_Internal {
 public:
};

s_service_update_req::s_service_update_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_update_req)
}
s_service_update_req::s_service_update_req(const s_service_update_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_update_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.s_service_update_req)
}

inline void s_service_update_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_update_req::~s_service_update_req() {
  // @@protoc_insertion_point(destructor:game.s_service_update_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_update_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
}

void s_service_update_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_update_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_update_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_update_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.s_service_info services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_update_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_update_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_update_req)
  return target;
}

size_t s_service_update_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_update_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_update_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_update_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_update_req::GetClassData() const { return &_class_data_; }


void s_service_update_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_update_req*>(&to_msg);
  auto& from = static_cast<const s_service_update_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_update_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_update_req::CopyFrom(const s_service_update_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_update_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_update_req::IsInitialized() const {
  return true;
}

void s_service_update_req::InternalSwap(s_service_update_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_update_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[6]);
}

// ===================================================================

class s_service_shm::_Internal {
 public:
};

s_service_shm::s_service_shm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_shm)
}
s_service_shm::s_service_shm(const s_service_shm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_shm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:game.s_service_shm)
}

inline void s_service_shm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

s_service_shm::~s_service_shm() {
  // @@protoc_insertion_point(destructor:game.s_service_shm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_shm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void s_service_shm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_shm::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_shm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_shm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.s_service_shm.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_shm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_shm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.s_service_shm.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_shm)
  return target;
}

size_t s_service_shm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_shm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_shm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_shm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_shm::GetClassData() const { return &_class_data_; }


void s_service_shm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_shm*>(&to_msg);
  auto& from = static_cast<const s_service_shm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_shm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_shm::CopyFrom(const s_service_shm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_shm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_shm::IsInitialized() const {
  return true;
}

void s_service_shm::InternalSwap(s_service_shm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_shm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[7]);
}

// ===================================================================

class s_service_register_req::_Internal {
 public:
  static const ::game::s_service_info& info(const s_service_register_req* msg);
};

const ::game::s_service_info&
s_service_register_req::_Internal::info(const s_service_register_req* msg) {
  return *msg->_impl_.info_;
}
s_service_register_req::s_service_register_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_register_req)
}
s_service_register_req::s_service_register_req(const s_service_register_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_register_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shm_){from._impl_.shm_}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.channel_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::game::s_service_info(*from._impl_.info_);
  }
  _this->_impl_.channel_size_ = from._impl_.channel_size_;
  // @@protoc_insertion_point(copy_constructor:game.s_service_register_req)
}

inline void s_service_register_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shm_){arena}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.channel_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_register_req::~s_service_register_req() {
  // @@protoc_insertion_point(destructor:game.s_service_register_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_register_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shm_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void s_service_register_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_register_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_register_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shm_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _impl_.channel_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_register_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.s_service_info info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.s_service_shm shm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_register_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_register_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.s_service_info info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // uint32 channel_size = 2;
  if (this->_internal_channel_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_size(), target);
  }

  // repeated .game.s_service_shm shm = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shm_size()); i < n; i++) {
    const auto& repfield = this->_internal_shm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_register_req)
  return target;
}

size_t s_service_register_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_register_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_service_shm shm = 3;
  total_size += 1UL * this->_internal_shm_size();
  for (const auto& msg : this->_impl_.shm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.s_service_info info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // uint32 channel_size = 2;
  if (this->_internal_channel_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_register_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_register_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_register_req::GetClassData() const { return &_class_data_; }


void s_service_register_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_register_req*>(&to_msg);
  auto& from = static_cast<const s_service_register_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_register_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shm_.MergeFrom(from._impl_.shm_);
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::game::s_service_info::MergeFrom(
        from._internal_info());
  }
  if (from._internal_channel_size() != 0) {
    _this->_internal_set_channel_size(from._internal_channel_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_register_req::CopyFrom(const s_service_register_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_register_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_register_req::IsInitialized() const {
  return true;
}

void s_service_register_req::InternalSwap(s_service_register_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shm_.InternalSwap(&other->_impl_.shm_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_service_register_req, _impl_.channel_size_)
      + sizeof(s_service_register_req::_impl_.channel_size_)
      - PROTOBUF_FIELD_OFFSET(s_service_register_req, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_register_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[8]);
}

// ===================================================================

class s_service_register_ack::_Internal {
 public:
  static const ::game::ack_result& result(const s_service_register_ack* msg);
};

const ::game::ack_result&
s_service_register_ack::_Internal::result(const s_service_register_ack* msg) {
  return *msg->_impl_.result_;
}
void s_service_register_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
s_service_register_ack::s_service_register_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_register_ack)
}
s_service_register_ack::s_service_register_ack(const s_service_register_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_register_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.gate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  _this->_impl_.gate_ = from._impl_.gate_;
  // @@protoc_insertion_point(copy_constructor:game.s_service_register_ack)
}

inline void s_service_register_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.gate_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_register_ack::~s_service_register_ack() {
  // @@protoc_insertion_point(destructor:game.s_service_register_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_register_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void s_service_register_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_register_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_register_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _impl_.gate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_register_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_register_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_register_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // uint32 gate = 2;
  if (this->_internal_gate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_register_ack)
  return target;
}

size_t s_service_register_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_register_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // uint32 gate = 2;
  if (this->_internal_gate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_register_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_register_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_register_ack::GetClassData() const { return &_class_data_; }


void s_service_register_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_register_ack*>(&to_msg);
  auto& from = static_cast<const s_service_register_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_register_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  if (from._internal_gate() != 0) {
    _this->_internal_set_gate(from._internal_gate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_register_ack::CopyFrom(const s_service_register_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_register_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_register_ack::IsInitialized() const {
  return true;
}

void s_service_register_ack::InternalSwap(s_service_register_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_service_register_ack, _impl_.gate_)
      + sizeof(s_service_register_ack::_impl_.gate_)
      - PROTOBUF_FIELD_OFFSET(s_service_register_ack, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_register_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[9]);
}

// ===================================================================

class s_gate_forward_brd::_Internal {
 public:
};

s_gate_forward_brd::s_gate_forward_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_gate_forward_brd)
}
s_gate_forward_brd::s_gate_forward_brd(const s_gate_forward_brd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_gate_forward_brd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.session_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:game.s_gate_forward_brd)
}

inline void s_gate_forward_brd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.from_){0u}
    , decltype(_impl_.to_){0u}
    , decltype(_impl_.session_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

s_gate_forward_brd::~s_gate_forward_brd() {
  // @@protoc_insertion_point(destructor:game.s_gate_forward_brd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_gate_forward_brd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void s_gate_forward_brd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_gate_forward_brd::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_gate_forward_brd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_gate_forward_brd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_gate_forward_brd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_gate_forward_brd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // uint64 session = 4;
  if (this->_internal_session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_session(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_gate_forward_brd)
  return target;
}

size_t s_gate_forward_brd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_gate_forward_brd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint64 session = 4;
  if (this->_internal_session() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session());
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_gate_forward_brd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_gate_forward_brd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_gate_forward_brd::GetClassData() const { return &_class_data_; }


void s_gate_forward_brd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_gate_forward_brd*>(&to_msg);
  auto& from = static_cast<const s_gate_forward_brd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_gate_forward_brd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_session() != 0) {
    _this->_internal_set_session(from._internal_session());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_gate_forward_brd::CopyFrom(const s_gate_forward_brd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_gate_forward_brd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_gate_forward_brd::IsInitialized() const {
  return true;
}

void s_gate_forward_brd::InternalSwap(s_gate_forward_brd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_gate_forward_brd, _impl_.id_)
      + sizeof(s_gate_forward_brd::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(s_gate_forward_brd, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_gate_forward_brd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[10]);
}

// ===================================================================

class s_service_subscribe_req::_Internal {
 public:
};

s_service_subscribe_req::s_service_subscribe_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_subscribe_req)
}
s_service_subscribe_req::s_service_subscribe_req(const s_service_subscribe_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_subscribe_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tp_ = from._impl_.tp_;
  // @@protoc_insertion_point(copy_constructor:game.s_service_subscribe_req)
}

inline void s_service_subscribe_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_subscribe_req::~s_service_subscribe_req() {
  // @@protoc_insertion_point(destructor:game.s_service_subscribe_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_subscribe_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s_service_subscribe_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_subscribe_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_subscribe_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_subscribe_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.service_type tp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tp(static_cast<::game::service_type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_subscribe_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_subscribe_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.service_type tp = 1;
  if (this->_internal_tp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_subscribe_req)
  return target;
}

size_t s_service_subscribe_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_subscribe_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.service_type tp = 1;
  if (this->_internal_tp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_subscribe_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_subscribe_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_subscribe_req::GetClassData() const { return &_class_data_; }


void s_service_subscribe_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_subscribe_req*>(&to_msg);
  auto& from = static_cast<const s_service_subscribe_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_subscribe_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tp() != 0) {
    _this->_internal_set_tp(from._internal_tp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_subscribe_req::CopyFrom(const s_service_subscribe_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_subscribe_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_subscribe_req::IsInitialized() const {
  return true;
}

void s_service_subscribe_req::InternalSwap(s_service_subscribe_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tp_, other->_impl_.tp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_subscribe_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[11]);
}

// ===================================================================

class s_service_subscribe_ack::_Internal {
 public:
  static const ::game::ack_result& result(const s_service_subscribe_ack* msg);
};

const ::game::ack_result&
s_service_subscribe_ack::_Internal::result(const s_service_subscribe_ack* msg) {
  return *msg->_impl_.result_;
}
void s_service_subscribe_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
s_service_subscribe_ack::s_service_subscribe_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_subscribe_ack)
}
s_service_subscribe_ack::s_service_subscribe_ack(const s_service_subscribe_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_subscribe_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:game.s_service_subscribe_ack)
}

inline void s_service_subscribe_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_subscribe_ack::~s_service_subscribe_ack() {
  // @@protoc_insertion_point(destructor:game.s_service_subscribe_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_subscribe_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void s_service_subscribe_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_subscribe_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_subscribe_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_subscribe_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.s_service_info services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_subscribe_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_subscribe_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .game.s_service_info services = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_subscribe_ack)
  return target;
}

size_t s_service_subscribe_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_subscribe_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 2;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_subscribe_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_subscribe_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_subscribe_ack::GetClassData() const { return &_class_data_; }


void s_service_subscribe_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_subscribe_ack*>(&to_msg);
  auto& from = static_cast<const s_service_subscribe_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_subscribe_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_subscribe_ack::CopyFrom(const s_service_subscribe_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_subscribe_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_subscribe_ack::IsInitialized() const {
  return true;
}

void s_service_subscribe_ack::InternalSwap(s_service_subscribe_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_subscribe_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[12]);
}

// ===================================================================

class s_service_subscribe_brd::_Internal {
 public:
};

s_service_subscribe_brd::s_service_subscribe_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_service_subscribe_brd)
}
s_service_subscribe_brd::s_service_subscribe_brd(const s_service_subscribe_brd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_service_subscribe_brd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.s_service_subscribe_brd)
}

inline void s_service_subscribe_brd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_service_subscribe_brd::~s_service_subscribe_brd() {
  // @@protoc_insertion_point(destructor:game.s_service_subscribe_brd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_service_subscribe_brd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
}

void s_service_subscribe_brd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_service_subscribe_brd::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_service_subscribe_brd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_service_subscribe_brd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.s_service_info services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_service_subscribe_brd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_service_subscribe_brd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_service_subscribe_brd)
  return target;
}

size_t s_service_subscribe_brd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_service_subscribe_brd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.s_service_info services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_service_subscribe_brd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_service_subscribe_brd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_service_subscribe_brd::GetClassData() const { return &_class_data_; }


void s_service_subscribe_brd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_service_subscribe_brd*>(&to_msg);
  auto& from = static_cast<const s_service_subscribe_brd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_service_subscribe_brd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_service_subscribe_brd::CopyFrom(const s_service_subscribe_brd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_service_subscribe_brd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_service_subscribe_brd::IsInitialized() const {
  return true;
}

void s_service_subscribe_brd::InternalSwap(s_service_subscribe_brd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_service_subscribe_brd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[13]);
}

// ===================================================================

class s_ping_req::_Internal {
 public:
};

s_ping_req::s_ping_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_ping_req)
}
s_ping_req::s_ping_req(const s_ping_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_ping_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.t1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.t1_ = from._impl_.t1_;
  // @@protoc_insertion_point(copy_constructor:game.s_ping_req)
}

inline void s_ping_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.t1_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_ping_req::~s_ping_req() {
  // @@protoc_insertion_point(destructor:game.s_ping_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_ping_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s_ping_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_ping_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_ping_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.t1_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_ping_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 t1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.t1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_ping_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_ping_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 t1 = 1;
  if (this->_internal_t1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_t1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_ping_req)
  return target;
}

size_t s_ping_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_ping_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 t1 = 1;
  if (this->_internal_t1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_t1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_ping_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_ping_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_ping_req::GetClassData() const { return &_class_data_; }


void s_ping_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_ping_req*>(&to_msg);
  auto& from = static_cast<const s_ping_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_ping_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_ping_req::CopyFrom(const s_ping_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_ping_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ping_req::IsInitialized() const {
  return true;
}

void s_ping_req::InternalSwap(s_ping_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.t1_, other->_impl_.t1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s_ping_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[14]);
}

// ===================================================================

class s_ping_ack::_Internal {
 public:
};

s_ping_ack::s_ping_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_ping_ack)
}
s_ping_ack::s_ping_ack(const s_ping_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_ping_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.t1_){}
    , decltype(_impl_.t2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.t1_, &from._impl_.t1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t2_) -
    reinterpret_cast<char*>(&_impl_.t1_)) + sizeof(_impl_.t2_));
  // @@protoc_insertion_point(copy_constructor:game.s_ping_ack)
}

inline void s_ping_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.t1_){int64_t{0}}
    , decltype(_impl_.t2_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_ping_ack::~s_ping_ack() {
  // @@protoc_insertion_point(destructor:game.s_ping_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_ping_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s_ping_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_ping_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_ping_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.t1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.t2_) -
      reinterpret_cast<char*>(&_impl_.t1_)) + sizeof(_impl_.t2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_ping_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 t1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.t1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 t2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.t2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_ping_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_ping_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 t1 = 1;
  if (this->_internal_t1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_t1(), target);
  }

  // int64 t2 = 2;
  if (this->_internal_t2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_t2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_ping_ack)
  return target;
}

size_t s_ping_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_ping_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 t1 = 1;
  if (this->_internal_t1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_t1());
  }

  // int64 t2 = 2;
  if (this->_internal_t2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_t2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_ping_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_ping_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_ping_ack::GetClassData() const { return &_class_data_; }


void s_ping_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_ping_ack*>(&to_msg);
  auto& from = static_cast<const s_ping_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_ping_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  if (from._internal_t2() != 0) {
    _this->_internal_set_t2(from._internal_t2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_ping_ack::CopyFrom(const s_ping_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_ping_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_ping_ack::IsInitialized() const {
  return true;
}

void s_ping_ack::InternalSwap(s_ping_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_ping_ack, _impl_.t2_)
      + sizeof(s_ping_ack::_impl_.t2_)
      - PROTOBUF_FIELD_OFFSET(s_ping_ack, _impl_.t1_)>(
          reinterpret_cast<char*>(&_impl_.t1_),
          reinterpret_cast<char*>(&other->_impl_.t1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_ping_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[15]);
}

// ===================================================================

class s_client_forward_brd::_Internal {
 public:
};

s_client_forward_brd::s_client_forward_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_client_forward_brd)
}
s_client_forward_brd::s_client_forward_brd(const s_client_forward_brd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_client_forward_brd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.gate_){}
    , decltype(_impl_.socket_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gate_, &from._impl_.gate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.userid_) -
    reinterpret_cast<char*>(&_impl_.gate_)) + sizeof(_impl_.userid_));
  // @@protoc_insertion_point(copy_constructor:game.s_client_forward_brd)
}

inline void s_client_forward_brd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.gate_){0u}
    , decltype(_impl_.socket_){0u}
    , decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

s_client_forward_brd::~s_client_forward_brd() {
  // @@protoc_insertion_point(destructor:game.s_client_forward_brd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_client_forward_brd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void s_client_forward_brd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_client_forward_brd::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_client_forward_brd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.gate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.userid_) -
      reinterpret_cast<char*>(&_impl_.gate_)) + sizeof(_impl_.userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_client_forward_brd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_client_forward_brd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_client_forward_brd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gate = 1;
  if (this->_internal_gate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gate(), target);
  }

  // uint32 socket = 2;
  if (this->_internal_socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket(), target);
  }

  // int32 userid = 3;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_client_forward_brd)
  return target;
}

size_t s_client_forward_brd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_client_forward_brd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 gate = 1;
  if (this->_internal_gate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gate());
  }

  // uint32 socket = 2;
  if (this->_internal_socket() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socket());
  }

  // int32 userid = 3;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_client_forward_brd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_client_forward_brd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_client_forward_brd::GetClassData() const { return &_class_data_; }


void s_client_forward_brd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_client_forward_brd*>(&to_msg);
  auto& from = static_cast<const s_client_forward_brd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_client_forward_brd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_gate() != 0) {
    _this->_internal_set_gate(from._internal_gate());
  }
  if (from._internal_socket() != 0) {
    _this->_internal_set_socket(from._internal_socket());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_client_forward_brd::CopyFrom(const s_client_forward_brd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_client_forward_brd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_client_forward_brd::IsInitialized() const {
  return true;
}

void s_client_forward_brd::InternalSwap(s_client_forward_brd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_client_forward_brd, _impl_.userid_)
      + sizeof(s_client_forward_brd::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(s_client_forward_brd, _impl_.gate_)>(
          reinterpret_cast<char*>(&_impl_.gate_),
          reinterpret_cast<char*>(&other->_impl_.gate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_client_forward_brd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[16]);
}

// ===================================================================

class s_kick_client_req::_Internal {
 public:
};

s_kick_client_req::s_kick_client_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.s_kick_client_req)
}
s_kick_client_req::s_kick_client_req(const s_kick_client_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  s_kick_client_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.socket_, &from._impl_.socket_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.userid_) -
    reinterpret_cast<char*>(&_impl_.socket_)) + sizeof(_impl_.userid_));
  // @@protoc_insertion_point(copy_constructor:game.s_kick_client_req)
}

inline void s_kick_client_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_){0u}
    , decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

s_kick_client_req::~s_kick_client_req() {
  // @@protoc_insertion_point(destructor:game.s_kick_client_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void s_kick_client_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s_kick_client_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void s_kick_client_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.s_kick_client_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.socket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.userid_) -
      reinterpret_cast<char*>(&_impl_.socket_)) + sizeof(_impl_.userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s_kick_client_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* s_kick_client_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.s_kick_client_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 socket = 2;
  if (this->_internal_socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket(), target);
  }

  // int32 userid = 3;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.s_kick_client_req)
  return target;
}

size_t s_kick_client_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.s_kick_client_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 socket = 2;
  if (this->_internal_socket() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socket());
  }

  // int32 userid = 3;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s_kick_client_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    s_kick_client_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s_kick_client_req::GetClassData() const { return &_class_data_; }


void s_kick_client_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<s_kick_client_req*>(&to_msg);
  auto& from = static_cast<const s_kick_client_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.s_kick_client_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_socket() != 0) {
    _this->_internal_set_socket(from._internal_socket());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s_kick_client_req::CopyFrom(const s_kick_client_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.s_kick_client_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_kick_client_req::IsInitialized() const {
  return true;
}

void s_kick_client_req::InternalSwap(s_kick_client_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s_kick_client_req, _impl_.userid_)
      + sizeof(s_kick_client_req::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(s_kick_client_req, _impl_.socket_)>(
          reinterpret_cast<char*>(&_impl_.socket_),
          reinterpret_cast<char*>(&other->_impl_.socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s_kick_client_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fserver_2eproto_getter, &descriptor_table_msg_5fserver_2eproto_once,
      file_level_metadata_msg_5fserver_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::s_service_info*
Arena::CreateMaybeMessage< ::game::s_service_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_info >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_address*
Arena::CreateMaybeMessage< ::game::s_gate_address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_address >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_info*
Arena::CreateMaybeMessage< ::game::s_gate_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_info >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_register_req*
Arena::CreateMaybeMessage< ::game::s_gate_register_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_register_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_register_ack*
Arena::CreateMaybeMessage< ::game::s_gate_register_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_register_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_register_brd*
Arena::CreateMaybeMessage< ::game::s_gate_register_brd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_register_brd >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_update_req*
Arena::CreateMaybeMessage< ::game::s_service_update_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_update_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_shm*
Arena::CreateMaybeMessage< ::game::s_service_shm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_shm >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_register_req*
Arena::CreateMaybeMessage< ::game::s_service_register_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_register_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_register_ack*
Arena::CreateMaybeMessage< ::game::s_service_register_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_register_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_gate_forward_brd*
Arena::CreateMaybeMessage< ::game::s_gate_forward_brd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_gate_forward_brd >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_subscribe_req*
Arena::CreateMaybeMessage< ::game::s_service_subscribe_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_subscribe_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_subscribe_ack*
Arena::CreateMaybeMessage< ::game::s_service_subscribe_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_subscribe_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_service_subscribe_brd*
Arena::CreateMaybeMessage< ::game::s_service_subscribe_brd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_service_subscribe_brd >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_ping_req*
Arena::CreateMaybeMessage< ::game::s_ping_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_ping_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_ping_ack*
Arena::CreateMaybeMessage< ::game::s_ping_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_ping_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_client_forward_brd*
Arena::CreateMaybeMessage< ::game::s_client_forward_brd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_client_forward_brd >(arena);
}
template<> PROTOBUF_NOINLINE ::game::s_kick_client_req*
Arena::CreateMaybeMessage< ::game::s_kick_client_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::s_kick_client_req >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
