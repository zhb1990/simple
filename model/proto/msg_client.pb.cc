// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_client.proto

#include "msg_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR user_info_lite::user_info_lite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct user_info_liteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR user_info_liteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~user_info_liteDefaultTypeInternal() {}
  union {
    user_info_lite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 user_info_liteDefaultTypeInternal _user_info_lite_default_instance_;
PROTOBUF_CONSTEXPR login_req::login_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct login_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_reqDefaultTypeInternal() {}
  union {
    login_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_reqDefaultTypeInternal _login_req_default_instance_;
PROTOBUF_CONSTEXPR login_ack::login_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_.has_match_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct login_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_ackDefaultTypeInternal() {}
  union {
    login_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_ackDefaultTypeInternal _login_ack_default_instance_;
PROTOBUF_CONSTEXPR enter_room_ack::enter_room_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.opponent_)*/nullptr
  , /*decltype(_impl_.is_black_)*/false
  , /*decltype(_impl_.is_my_turn_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct enter_room_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR enter_room_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~enter_room_ackDefaultTypeInternal() {}
  union {
    enter_room_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 enter_room_ackDefaultTypeInternal _enter_room_ack_default_instance_;
PROTOBUF_CONSTEXPR move_req::move_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct move_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR move_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~move_reqDefaultTypeInternal() {}
  union {
    move_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 move_reqDefaultTypeInternal _move_req_default_instance_;
PROTOBUF_CONSTEXPR move_ack::move_ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.game_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct move_ackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR move_ackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~move_ackDefaultTypeInternal() {}
  union {
    move_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 move_ackDefaultTypeInternal _move_ack_default_instance_;
PROTOBUF_CONSTEXPR move_brd::move_brd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.game_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct move_brdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR move_brdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~move_brdDefaultTypeInternal() {}
  union {
    move_brd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 move_brdDefaultTypeInternal _move_brd_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_msg_5fclient_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fclient_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_5fclient_2eproto = nullptr;

const uint32_t TableStruct_msg_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::user_info_lite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::user_info_lite, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::game::user_info_lite, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::login_req, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::game::login_req, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::login_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::login_ack, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::game::login_ack, _impl_.has_match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::enter_room_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::enter_room_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::enter_room_ack, _impl_.is_black_),
  PROTOBUF_FIELD_OFFSET(::game::enter_room_ack, _impl_.is_my_turn_),
  PROTOBUF_FIELD_OFFSET(::game::enter_room_ack, _impl_.opponent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::move_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::move_req, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::game::move_req, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::move_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::move_ack, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::game::move_ack, _impl_.game_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::move_brd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::move_brd, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::game::move_brd, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::game::move_brd, _impl_.game_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::user_info_lite)},
  { 8, -1, -1, sizeof(::game::login_req)},
  { 16, -1, -1, sizeof(::game::login_ack)},
  { 25, -1, -1, sizeof(::game::enter_room_ack)},
  { 35, -1, -1, sizeof(::game::move_req)},
  { 43, -1, -1, sizeof(::game::move_ack)},
  { 51, -1, -1, sizeof(::game::move_brd)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_user_info_lite_default_instance_._instance,
  &::game::_login_req_default_instance_._instance,
  &::game::_login_ack_default_instance_._instance,
  &::game::_enter_room_ack_default_instance_._instance,
  &::game::_move_req_default_instance_._instance,
  &::game::_move_ack_default_instance_._instance,
  &::game::_move_brd_default_instance_._instance,
};

const char descriptor_table_protodef_msg_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020msg_client.proto\022\004game\032\016msg_base.proto"
  "\"1\n\016user_info_lite\022\017\n\007account\030\001 \001(\t\022\016\n\006u"
  "serid\030\002 \001(\005\".\n\tlogin_req\022\017\n\007account\030\001 \001("
  "\t\022\020\n\010password\030\002 \001(\t\"P\n\tlogin_ack\022 \n\006resu"
  "lt\030\001 \001(\0132\020.game.ack_result\022\016\n\006userid\030\002 \001"
  "(\005\022\021\n\thas_match\030\003 \001(\010\"\200\001\n\016enter_room_ack"
  "\022 \n\006result\030\001 \001(\0132\020.game.ack_result\022\020\n\010is"
  "_black\030\002 \001(\010\022\022\n\nis_my_turn\030\003 \001(\010\022&\n\010oppo"
  "nent\030\004 \001(\0132\024.game.user_info_lite\" \n\010move"
  "_req\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"M\n\010move_ack\022 "
  "\n\006result\030\001 \001(\0132\020.game.ack_result\022\037\n\004game"
  "\030\002 \001(\0162\021.game.game_result\"A\n\010move_brd\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\037\n\004game\030\003 \001(\0162\021.game"
  ".game_result*4\n\013game_result\022\010\n\004none\020\000\022\007\n"
  "\003win\020\001\022\010\n\004lose\020\002\022\010\n\004draw\020\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_5fclient_2eproto_deps[1] = {
  &::descriptor_table_msg_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_5fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fclient_2eproto = {
    false, false, 594, descriptor_table_protodef_msg_5fclient_2eproto,
    "msg_client.proto",
    &descriptor_table_msg_5fclient_2eproto_once, descriptor_table_msg_5fclient_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_msg_5fclient_2eproto::offsets,
    file_level_metadata_msg_5fclient_2eproto, file_level_enum_descriptors_msg_5fclient_2eproto,
    file_level_service_descriptors_msg_5fclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fclient_2eproto_getter() {
  return &descriptor_table_msg_5fclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fclient_2eproto(&descriptor_table_msg_5fclient_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* game_result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fclient_2eproto);
  return file_level_enum_descriptors_msg_5fclient_2eproto[0];
}
bool game_result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class user_info_lite::_Internal {
 public:
};

user_info_lite::user_info_lite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.user_info_lite)
}
user_info_lite::user_info_lite(const user_info_lite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  user_info_lite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:game.user_info_lite)
}

inline void user_info_lite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

user_info_lite::~user_info_lite() {
  // @@protoc_insertion_point(destructor:game.user_info_lite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user_info_lite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
}

void user_info_lite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void user_info_lite::Clear() {
// @@protoc_insertion_point(message_clear_start:game.user_info_lite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_info_lite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.user_info_lite.account"));
        } else
          goto handle_unusual;
        continue;
      // int32 userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* user_info_lite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.user_info_lite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_info_lite.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int32 userid = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.user_info_lite)
  return target;
}

size_t user_info_lite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.user_info_lite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int32 userid = 2;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user_info_lite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    user_info_lite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user_info_lite::GetClassData() const { return &_class_data_; }


void user_info_lite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<user_info_lite*>(&to_msg);
  auto& from = static_cast<const user_info_lite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.user_info_lite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user_info_lite::CopyFrom(const user_info_lite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.user_info_lite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_lite::IsInitialized() const {
  return true;
}

void user_info_lite::InternalSwap(user_info_lite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_info_lite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[0]);
}

// ===================================================================

class login_req::_Internal {
 public:
};

login_req::login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_req)
}
login_req::login_req(const login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.login_req)
}

inline void login_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_req::~login_req() {
  // @@protoc_insertion_point(destructor:game.login_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.password_.Destroy();
}

void login_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_req.account"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_req.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_req.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_req.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_req)
  return target;
}

size_t login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_req::GetClassData() const { return &_class_data_; }


void login_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_req*>(&to_msg);
  auto& from = static_cast<const login_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_req::CopyFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req::IsInitialized() const {
  return true;
}

void login_req::InternalSwap(login_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata login_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[1]);
}

// ===================================================================

class login_ack::_Internal {
 public:
  static const ::game::ack_result& result(const login_ack* msg);
};

const ::game::ack_result&
login_ack::_Internal::result(const login_ack* msg) {
  return *msg->_impl_.result_;
}
void login_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
login_ack::login_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_ack)
}
login_ack::login_ack(const login_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.has_match_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_match_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.has_match_));
  // @@protoc_insertion_point(copy_constructor:game.login_ack)
}

inline void login_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.userid_){0}
    , decltype(_impl_.has_match_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

login_ack::~login_ack() {
  // @@protoc_insertion_point(destructor:game.login_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void login_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_match_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.has_match_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // int32 userid = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // bool has_match = 3;
  if (this->_internal_has_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_ack)
  return target;
}

size_t login_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // int32 userid = 2;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  // bool has_match = 3;
  if (this->_internal_has_match() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_ack::GetClassData() const { return &_class_data_; }


void login_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_ack*>(&to_msg);
  auto& from = static_cast<const login_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_has_match() != 0) {
    _this->_internal_set_has_match(from._internal_has_match());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_ack::CopyFrom(const login_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_ack::IsInitialized() const {
  return true;
}

void login_ack::InternalSwap(login_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(login_ack, _impl_.has_match_)
      + sizeof(login_ack::_impl_.has_match_)
      - PROTOBUF_FIELD_OFFSET(login_ack, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata login_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[2]);
}

// ===================================================================

class enter_room_ack::_Internal {
 public:
  static const ::game::ack_result& result(const enter_room_ack* msg);
  static const ::game::user_info_lite& opponent(const enter_room_ack* msg);
};

const ::game::ack_result&
enter_room_ack::_Internal::result(const enter_room_ack* msg) {
  return *msg->_impl_.result_;
}
const ::game::user_info_lite&
enter_room_ack::_Internal::opponent(const enter_room_ack* msg) {
  return *msg->_impl_.opponent_;
}
void enter_room_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
enter_room_ack::enter_room_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.enter_room_ack)
}
enter_room_ack::enter_room_ack(const enter_room_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  enter_room_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.opponent_){nullptr}
    , decltype(_impl_.is_black_){}
    , decltype(_impl_.is_my_turn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  if (from._internal_has_opponent()) {
    _this->_impl_.opponent_ = new ::game::user_info_lite(*from._impl_.opponent_);
  }
  ::memcpy(&_impl_.is_black_, &from._impl_.is_black_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_my_turn_) -
    reinterpret_cast<char*>(&_impl_.is_black_)) + sizeof(_impl_.is_my_turn_));
  // @@protoc_insertion_point(copy_constructor:game.enter_room_ack)
}

inline void enter_room_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.opponent_){nullptr}
    , decltype(_impl_.is_black_){false}
    , decltype(_impl_.is_my_turn_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

enter_room_ack::~enter_room_ack() {
  // @@protoc_insertion_point(destructor:game.enter_room_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void enter_room_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
  if (this != internal_default_instance()) delete _impl_.opponent_;
}

void enter_room_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void enter_room_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.enter_room_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opponent_ != nullptr) {
    delete _impl_.opponent_;
  }
  _impl_.opponent_ = nullptr;
  ::memset(&_impl_.is_black_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_my_turn_) -
      reinterpret_cast<char*>(&_impl_.is_black_)) + sizeof(_impl_.is_my_turn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* enter_room_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_black = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_black_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_my_turn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_my_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.user_info_lite opponent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_opponent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* enter_room_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.enter_room_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // bool is_black = 2;
  if (this->_internal_is_black() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_black(), target);
  }

  // bool is_my_turn = 3;
  if (this->_internal_is_my_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_my_turn(), target);
  }

  // .game.user_info_lite opponent = 4;
  if (this->_internal_has_opponent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::opponent(this),
        _Internal::opponent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.enter_room_ack)
  return target;
}

size_t enter_room_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.enter_room_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // .game.user_info_lite opponent = 4;
  if (this->_internal_has_opponent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opponent_);
  }

  // bool is_black = 2;
  if (this->_internal_is_black() != 0) {
    total_size += 1 + 1;
  }

  // bool is_my_turn = 3;
  if (this->_internal_is_my_turn() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData enter_room_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    enter_room_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*enter_room_ack::GetClassData() const { return &_class_data_; }


void enter_room_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<enter_room_ack*>(&to_msg);
  auto& from = static_cast<const enter_room_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.enter_room_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  if (from._internal_has_opponent()) {
    _this->_internal_mutable_opponent()->::game::user_info_lite::MergeFrom(
        from._internal_opponent());
  }
  if (from._internal_is_black() != 0) {
    _this->_internal_set_is_black(from._internal_is_black());
  }
  if (from._internal_is_my_turn() != 0) {
    _this->_internal_set_is_my_turn(from._internal_is_my_turn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void enter_room_ack::CopyFrom(const enter_room_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.enter_room_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_room_ack::IsInitialized() const {
  return true;
}

void enter_room_ack::InternalSwap(enter_room_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(enter_room_ack, _impl_.is_my_turn_)
      + sizeof(enter_room_ack::_impl_.is_my_turn_)
      - PROTOBUF_FIELD_OFFSET(enter_room_ack, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata enter_room_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[3]);
}

// ===================================================================

class move_req::_Internal {
 public:
};

move_req::move_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.move_req)
}
move_req::move_req(const move_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  move_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:game.move_req)
}

inline void move_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

move_req::~move_req() {
  // @@protoc_insertion_point(destructor:game.move_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void move_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void move_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void move_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.move_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* move_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* move_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.move_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.move_req)
  return target;
}

size_t move_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.move_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData move_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    move_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*move_req::GetClassData() const { return &_class_data_; }


void move_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<move_req*>(&to_msg);
  auto& from = static_cast<const move_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.move_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void move_req::CopyFrom(const move_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.move_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool move_req::IsInitialized() const {
  return true;
}

void move_req::InternalSwap(move_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(move_req, _impl_.y_)
      + sizeof(move_req::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(move_req, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata move_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[4]);
}

// ===================================================================

class move_ack::_Internal {
 public:
  static const ::game::ack_result& result(const move_ack* msg);
};

const ::game::ack_result&
move_ack::_Internal::result(const move_ack* msg) {
  return *msg->_impl_.result_;
}
void move_ack::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
move_ack::move_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.move_ack)
}
move_ack::move_ack(const move_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  move_ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.game_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::game::ack_result(*from._impl_.result_);
  }
  _this->_impl_.game_ = from._impl_.game_;
  // @@protoc_insertion_point(copy_constructor:game.move_ack)
}

inline void move_ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.game_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

move_ack::~move_ack() {
  // @@protoc_insertion_point(destructor:game.move_ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void move_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void move_ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void move_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:game.move_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _impl_.game_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* move_ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ack_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.game_result game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game(static_cast<::game::game_result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* move_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.move_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .game.game_result game = 2;
  if (this->_internal_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.move_ack)
  return target;
}

size_t move_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.move_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.ack_result result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // .game.game_result game = 2;
  if (this->_internal_game() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_game());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData move_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    move_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*move_ack::GetClassData() const { return &_class_data_; }


void move_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<move_ack*>(&to_msg);
  auto& from = static_cast<const move_ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.move_ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::game::ack_result::MergeFrom(
        from._internal_result());
  }
  if (from._internal_game() != 0) {
    _this->_internal_set_game(from._internal_game());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void move_ack::CopyFrom(const move_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.move_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool move_ack::IsInitialized() const {
  return true;
}

void move_ack::InternalSwap(move_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(move_ack, _impl_.game_)
      + sizeof(move_ack::_impl_.game_)
      - PROTOBUF_FIELD_OFFSET(move_ack, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata move_ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[5]);
}

// ===================================================================

class move_brd::_Internal {
 public:
};

move_brd::move_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.move_brd)
}
move_brd::move_brd(const move_brd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  move_brd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.game_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.game_));
  // @@protoc_insertion_point(copy_constructor:game.move_brd)
}

inline void move_brd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.game_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

move_brd::~move_brd() {
  // @@protoc_insertion_point(destructor:game.move_brd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void move_brd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void move_brd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void move_brd::Clear() {
// @@protoc_insertion_point(message_clear_start:game.move_brd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.game_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.game_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* move_brd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.game_result game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game(static_cast<::game::game_result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* move_brd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.move_brd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // .game.game_result game = 3;
  if (this->_internal_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_game(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.move_brd)
  return target;
}

size_t move_brd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.move_brd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .game.game_result game = 3;
  if (this->_internal_game() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_game());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData move_brd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    move_brd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*move_brd::GetClassData() const { return &_class_data_; }


void move_brd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<move_brd*>(&to_msg);
  auto& from = static_cast<const move_brd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.move_brd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_game() != 0) {
    _this->_internal_set_game(from._internal_game());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void move_brd::CopyFrom(const move_brd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.move_brd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool move_brd::IsInitialized() const {
  return true;
}

void move_brd::InternalSwap(move_brd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(move_brd, _impl_.game_)
      + sizeof(move_brd::_impl_.game_)
      - PROTOBUF_FIELD_OFFSET(move_brd, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata move_brd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fclient_2eproto_getter, &descriptor_table_msg_5fclient_2eproto_once,
      file_level_metadata_msg_5fclient_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::user_info_lite*
Arena::CreateMaybeMessage< ::game::user_info_lite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::user_info_lite >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_req*
Arena::CreateMaybeMessage< ::game::login_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_ack*
Arena::CreateMaybeMessage< ::game::login_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::enter_room_ack*
Arena::CreateMaybeMessage< ::game::enter_room_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::enter_room_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::move_req*
Arena::CreateMaybeMessage< ::game::move_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::move_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::move_ack*
Arena::CreateMaybeMessage< ::game::move_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::move_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::game::move_brd*
Arena::CreateMaybeMessage< ::game::move_brd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::move_brd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
