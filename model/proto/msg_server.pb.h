// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fserver_2eproto

#include <proto.hpp>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fserver_2eproto PROTO_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTO_API TableStruct_msg_5fserver_2eproto {
  static const uint32_t offsets[];
};
PROTO_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fserver_2eproto;
namespace game {
class s_gate_address;
struct s_gate_addressDefaultTypeInternal;
PROTO_API extern s_gate_addressDefaultTypeInternal _s_gate_address_default_instance_;
class s_gate_forward_brd;
struct s_gate_forward_brdDefaultTypeInternal;
PROTO_API extern s_gate_forward_brdDefaultTypeInternal _s_gate_forward_brd_default_instance_;
class s_gate_info;
struct s_gate_infoDefaultTypeInternal;
PROTO_API extern s_gate_infoDefaultTypeInternal _s_gate_info_default_instance_;
class s_gate_register_ack;
struct s_gate_register_ackDefaultTypeInternal;
PROTO_API extern s_gate_register_ackDefaultTypeInternal _s_gate_register_ack_default_instance_;
class s_gate_register_brd;
struct s_gate_register_brdDefaultTypeInternal;
PROTO_API extern s_gate_register_brdDefaultTypeInternal _s_gate_register_brd_default_instance_;
class s_gate_register_req;
struct s_gate_register_reqDefaultTypeInternal;
PROTO_API extern s_gate_register_reqDefaultTypeInternal _s_gate_register_req_default_instance_;
class s_service_info;
struct s_service_infoDefaultTypeInternal;
PROTO_API extern s_service_infoDefaultTypeInternal _s_service_info_default_instance_;
class s_service_register_ack;
struct s_service_register_ackDefaultTypeInternal;
PROTO_API extern s_service_register_ackDefaultTypeInternal _s_service_register_ack_default_instance_;
class s_service_register_req;
struct s_service_register_reqDefaultTypeInternal;
PROTO_API extern s_service_register_reqDefaultTypeInternal _s_service_register_req_default_instance_;
class s_service_shm;
struct s_service_shmDefaultTypeInternal;
PROTO_API extern s_service_shmDefaultTypeInternal _s_service_shm_default_instance_;
class s_service_subscribe_ack;
struct s_service_subscribe_ackDefaultTypeInternal;
PROTO_API extern s_service_subscribe_ackDefaultTypeInternal _s_service_subscribe_ack_default_instance_;
class s_service_subscribe_brd;
struct s_service_subscribe_brdDefaultTypeInternal;
PROTO_API extern s_service_subscribe_brdDefaultTypeInternal _s_service_subscribe_brd_default_instance_;
class s_service_subscribe_req;
struct s_service_subscribe_reqDefaultTypeInternal;
PROTO_API extern s_service_subscribe_reqDefaultTypeInternal _s_service_subscribe_req_default_instance_;
class s_service_update_req;
struct s_service_update_reqDefaultTypeInternal;
PROTO_API extern s_service_update_reqDefaultTypeInternal _s_service_update_req_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTO_API ::game::s_gate_address* Arena::CreateMaybeMessage<::game::s_gate_address>(Arena*);
template<> PROTO_API ::game::s_gate_forward_brd* Arena::CreateMaybeMessage<::game::s_gate_forward_brd>(Arena*);
template<> PROTO_API ::game::s_gate_info* Arena::CreateMaybeMessage<::game::s_gate_info>(Arena*);
template<> PROTO_API ::game::s_gate_register_ack* Arena::CreateMaybeMessage<::game::s_gate_register_ack>(Arena*);
template<> PROTO_API ::game::s_gate_register_brd* Arena::CreateMaybeMessage<::game::s_gate_register_brd>(Arena*);
template<> PROTO_API ::game::s_gate_register_req* Arena::CreateMaybeMessage<::game::s_gate_register_req>(Arena*);
template<> PROTO_API ::game::s_service_info* Arena::CreateMaybeMessage<::game::s_service_info>(Arena*);
template<> PROTO_API ::game::s_service_register_ack* Arena::CreateMaybeMessage<::game::s_service_register_ack>(Arena*);
template<> PROTO_API ::game::s_service_register_req* Arena::CreateMaybeMessage<::game::s_service_register_req>(Arena*);
template<> PROTO_API ::game::s_service_shm* Arena::CreateMaybeMessage<::game::s_service_shm>(Arena*);
template<> PROTO_API ::game::s_service_subscribe_ack* Arena::CreateMaybeMessage<::game::s_service_subscribe_ack>(Arena*);
template<> PROTO_API ::game::s_service_subscribe_brd* Arena::CreateMaybeMessage<::game::s_service_subscribe_brd>(Arena*);
template<> PROTO_API ::game::s_service_subscribe_req* Arena::CreateMaybeMessage<::game::s_service_subscribe_req>(Arena*);
template<> PROTO_API ::game::s_service_update_req* Arena::CreateMaybeMessage<::game::s_service_update_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum service_type : int {
  st_gate_master = 0,
  st_gate = 1,
  st_proxy = 2,
  st_login = 3,
  st_db_proxy = 4,
  st_logic = 5,
  st_logic_master = 6,
  st_match = 7,
  st_room = 8,
  st_center = 9,
  st_ai_center = 10,
  st_ai = 11,
  service_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  service_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTO_API bool service_type_IsValid(int value);
constexpr service_type service_type_MIN = st_gate_master;
constexpr service_type service_type_MAX = st_ai;
constexpr int service_type_ARRAYSIZE = service_type_MAX + 1;

PROTO_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* service_type_descriptor();
template<typename T>
inline const std::string& service_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, service_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function service_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    service_type_descriptor(), enum_t_value);
}
inline bool service_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, service_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<service_type>(
    service_type_descriptor(), name, value);
}
// ===================================================================

class PROTO_API s_service_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_info) */ {
 public:
  inline s_service_info() : s_service_info(nullptr) {}
  ~s_service_info() override;
  explicit PROTOBUF_CONSTEXPR s_service_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_info(const s_service_info& from);
  s_service_info(s_service_info&& from) noexcept
    : s_service_info() {
    *this = ::std::move(from);
  }

  inline s_service_info& operator=(const s_service_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_info& operator=(s_service_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_info* internal_default_instance() {
    return reinterpret_cast<const s_service_info*>(
               &_s_service_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(s_service_info& a, s_service_info& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_info& from) {
    s_service_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_info";
  }
  protected:
  explicit s_service_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTpFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .game.service_type tp = 2;
  void clear_tp();
  ::game::service_type tp() const;
  void set_tp(::game::service_type value);
  private:
  ::game::service_type _internal_tp() const;
  void _internal_set_tp(::game::service_type value);
  public:

  // bool online = 3;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_service_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    int tp_;
    bool online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_address) */ {
 public:
  inline s_gate_address() : s_gate_address(nullptr) {}
  ~s_gate_address() override;
  explicit PROTOBUF_CONSTEXPR s_gate_address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_address(const s_gate_address& from);
  s_gate_address(s_gate_address&& from) noexcept
    : s_gate_address() {
    *this = ::std::move(from);
  }

  inline s_gate_address& operator=(const s_gate_address& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_address& operator=(s_gate_address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_address& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_address* internal_default_instance() {
    return reinterpret_cast<const s_gate_address*>(
               &_s_gate_address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(s_gate_address& a, s_gate_address& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_address& from) {
    s_gate_address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_address";
  }
  protected:
  explicit s_gate_address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:game.s_gate_address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_info) */ {
 public:
  inline s_gate_info() : s_gate_info(nullptr) {}
  ~s_gate_info() override;
  explicit PROTOBUF_CONSTEXPR s_gate_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_info(const s_gate_info& from);
  s_gate_info(s_gate_info&& from) noexcept
    : s_gate_info() {
    *this = ::std::move(from);
  }

  inline s_gate_info& operator=(const s_gate_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_info& operator=(s_gate_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_info* internal_default_instance() {
    return reinterpret_cast<const s_gate_info*>(
               &_s_gate_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(s_gate_info& a, s_gate_info& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_info& from) {
    s_gate_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_info";
  }
  protected:
  explicit s_gate_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 2,
    kAddressesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .game.s_service_info services = 2;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::game::s_service_info* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
      mutable_services();
  private:
  const ::game::s_service_info& _internal_services(int index) const;
  ::game::s_service_info* _internal_add_services();
  public:
  const ::game::s_service_info& services(int index) const;
  ::game::s_service_info* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
      services() const;

  // repeated .game.s_gate_address addresses = 3;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::game::s_gate_address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_address >*
      mutable_addresses();
  private:
  const ::game::s_gate_address& _internal_addresses(int index) const;
  ::game::s_gate_address* _internal_add_addresses();
  public:
  const ::game::s_gate_address& addresses(int index) const;
  ::game::s_gate_address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_address >&
      addresses() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_gate_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info > services_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_address > addresses_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_register_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_register_req) */ {
 public:
  inline s_gate_register_req() : s_gate_register_req(nullptr) {}
  ~s_gate_register_req() override;
  explicit PROTOBUF_CONSTEXPR s_gate_register_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_register_req(const s_gate_register_req& from);
  s_gate_register_req(s_gate_register_req&& from) noexcept
    : s_gate_register_req() {
    *this = ::std::move(from);
  }

  inline s_gate_register_req& operator=(const s_gate_register_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_register_req& operator=(s_gate_register_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_register_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_register_req* internal_default_instance() {
    return reinterpret_cast<const s_gate_register_req*>(
               &_s_gate_register_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(s_gate_register_req& a, s_gate_register_req& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_register_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_register_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_register_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_register_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_register_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_register_req& from) {
    s_gate_register_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_register_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_register_req";
  }
  protected:
  explicit s_gate_register_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .game.s_gate_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::game::s_gate_info& info() const;
  PROTOBUF_NODISCARD ::game::s_gate_info* release_info();
  ::game::s_gate_info* mutable_info();
  void set_allocated_info(::game::s_gate_info* info);
  private:
  const ::game::s_gate_info& _internal_info() const;
  ::game::s_gate_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::game::s_gate_info* info);
  ::game::s_gate_info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:game.s_gate_register_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::s_gate_info* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_register_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_register_ack) */ {
 public:
  inline s_gate_register_ack() : s_gate_register_ack(nullptr) {}
  ~s_gate_register_ack() override;
  explicit PROTOBUF_CONSTEXPR s_gate_register_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_register_ack(const s_gate_register_ack& from);
  s_gate_register_ack(s_gate_register_ack&& from) noexcept
    : s_gate_register_ack() {
    *this = ::std::move(from);
  }

  inline s_gate_register_ack& operator=(const s_gate_register_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_register_ack& operator=(s_gate_register_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_register_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_register_ack* internal_default_instance() {
    return reinterpret_cast<const s_gate_register_ack*>(
               &_s_gate_register_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(s_gate_register_ack& a, s_gate_register_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_register_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_register_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_register_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_register_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_register_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_register_ack& from) {
    s_gate_register_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_register_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_register_ack";
  }
  protected:
  explicit s_gate_register_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGatesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .game.s_gate_info gates = 2;
  int gates_size() const;
  private:
  int _internal_gates_size() const;
  public:
  void clear_gates();
  ::game::s_gate_info* mutable_gates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >*
      mutable_gates();
  private:
  const ::game::s_gate_info& _internal_gates(int index) const;
  ::game::s_gate_info* _internal_add_gates();
  public:
  const ::game::s_gate_info& gates(int index) const;
  ::game::s_gate_info* add_gates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >&
      gates() const;

  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:game.s_gate_register_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info > gates_;
    ::game::ack_result* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_register_brd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_register_brd) */ {
 public:
  inline s_gate_register_brd() : s_gate_register_brd(nullptr) {}
  ~s_gate_register_brd() override;
  explicit PROTOBUF_CONSTEXPR s_gate_register_brd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_register_brd(const s_gate_register_brd& from);
  s_gate_register_brd(s_gate_register_brd&& from) noexcept
    : s_gate_register_brd() {
    *this = ::std::move(from);
  }

  inline s_gate_register_brd& operator=(const s_gate_register_brd& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_register_brd& operator=(s_gate_register_brd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_register_brd& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_register_brd* internal_default_instance() {
    return reinterpret_cast<const s_gate_register_brd*>(
               &_s_gate_register_brd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(s_gate_register_brd& a, s_gate_register_brd& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_register_brd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_register_brd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_register_brd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_register_brd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_register_brd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_register_brd& from) {
    s_gate_register_brd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_register_brd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_register_brd";
  }
  protected:
  explicit s_gate_register_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGatesFieldNumber = 1,
  };
  // repeated .game.s_gate_info gates = 1;
  int gates_size() const;
  private:
  int _internal_gates_size() const;
  public:
  void clear_gates();
  ::game::s_gate_info* mutable_gates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >*
      mutable_gates();
  private:
  const ::game::s_gate_info& _internal_gates(int index) const;
  ::game::s_gate_info* _internal_add_gates();
  public:
  const ::game::s_gate_info& gates(int index) const;
  ::game::s_gate_info* add_gates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >&
      gates() const;

  // @@protoc_insertion_point(class_scope:game.s_gate_register_brd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info > gates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_update_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_update_req) */ {
 public:
  inline s_service_update_req() : s_service_update_req(nullptr) {}
  ~s_service_update_req() override;
  explicit PROTOBUF_CONSTEXPR s_service_update_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_update_req(const s_service_update_req& from);
  s_service_update_req(s_service_update_req&& from) noexcept
    : s_service_update_req() {
    *this = ::std::move(from);
  }

  inline s_service_update_req& operator=(const s_service_update_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_update_req& operator=(s_service_update_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_update_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_update_req* internal_default_instance() {
    return reinterpret_cast<const s_service_update_req*>(
               &_s_service_update_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(s_service_update_req& a, s_service_update_req& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_update_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_update_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_update_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_update_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_update_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_update_req& from) {
    s_service_update_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_update_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_update_req";
  }
  protected:
  explicit s_service_update_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .game.s_service_info services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::game::s_service_info* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
      mutable_services();
  private:
  const ::game::s_service_info& _internal_services(int index) const;
  ::game::s_service_info* _internal_add_services();
  public:
  const ::game::s_service_info& services(int index) const;
  ::game::s_service_info* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
      services() const;

  // @@protoc_insertion_point(class_scope:game.s_service_update_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info > services_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_shm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_shm) */ {
 public:
  inline s_service_shm() : s_service_shm(nullptr) {}
  ~s_service_shm() override;
  explicit PROTOBUF_CONSTEXPR s_service_shm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_shm(const s_service_shm& from);
  s_service_shm(s_service_shm&& from) noexcept
    : s_service_shm() {
    *this = ::std::move(from);
  }

  inline s_service_shm& operator=(const s_service_shm& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_shm& operator=(s_service_shm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_shm& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_shm* internal_default_instance() {
    return reinterpret_cast<const s_service_shm*>(
               &_s_service_shm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(s_service_shm& a, s_service_shm& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_shm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_shm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_shm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_shm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_shm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_shm& from) {
    s_service_shm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_shm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_shm";
  }
  protected:
  explicit s_service_shm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_service_shm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_register_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_register_req) */ {
 public:
  inline s_service_register_req() : s_service_register_req(nullptr) {}
  ~s_service_register_req() override;
  explicit PROTOBUF_CONSTEXPR s_service_register_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_register_req(const s_service_register_req& from);
  s_service_register_req(s_service_register_req&& from) noexcept
    : s_service_register_req() {
    *this = ::std::move(from);
  }

  inline s_service_register_req& operator=(const s_service_register_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_register_req& operator=(s_service_register_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_register_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_register_req* internal_default_instance() {
    return reinterpret_cast<const s_service_register_req*>(
               &_s_service_register_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(s_service_register_req& a, s_service_register_req& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_register_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_register_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_register_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_register_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_register_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_register_req& from) {
    s_service_register_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_register_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_register_req";
  }
  protected:
  explicit s_service_register_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShmFieldNumber = 3,
    kInfoFieldNumber = 1,
    kChannelSizeFieldNumber = 2,
  };
  // repeated .game.s_service_shm shm = 3;
  int shm_size() const;
  private:
  int _internal_shm_size() const;
  public:
  void clear_shm();
  ::game::s_service_shm* mutable_shm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_shm >*
      mutable_shm();
  private:
  const ::game::s_service_shm& _internal_shm(int index) const;
  ::game::s_service_shm* _internal_add_shm();
  public:
  const ::game::s_service_shm& shm(int index) const;
  ::game::s_service_shm* add_shm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_shm >&
      shm() const;

  // .game.s_service_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::game::s_service_info& info() const;
  PROTOBUF_NODISCARD ::game::s_service_info* release_info();
  ::game::s_service_info* mutable_info();
  void set_allocated_info(::game::s_service_info* info);
  private:
  const ::game::s_service_info& _internal_info() const;
  ::game::s_service_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::game::s_service_info* info);
  ::game::s_service_info* unsafe_arena_release_info();

  // uint32 channel_size = 2;
  void clear_channel_size();
  uint32_t channel_size() const;
  void set_channel_size(uint32_t value);
  private:
  uint32_t _internal_channel_size() const;
  void _internal_set_channel_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_service_register_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_shm > shm_;
    ::game::s_service_info* info_;
    uint32_t channel_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_register_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_register_ack) */ {
 public:
  inline s_service_register_ack() : s_service_register_ack(nullptr) {}
  ~s_service_register_ack() override;
  explicit PROTOBUF_CONSTEXPR s_service_register_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_register_ack(const s_service_register_ack& from);
  s_service_register_ack(s_service_register_ack&& from) noexcept
    : s_service_register_ack() {
    *this = ::std::move(from);
  }

  inline s_service_register_ack& operator=(const s_service_register_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_register_ack& operator=(s_service_register_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_register_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_register_ack* internal_default_instance() {
    return reinterpret_cast<const s_service_register_ack*>(
               &_s_service_register_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(s_service_register_ack& a, s_service_register_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_register_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_register_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_register_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_register_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_register_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_register_ack& from) {
    s_service_register_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_register_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_register_ack";
  }
  protected:
  explicit s_service_register_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kGateFieldNumber = 2,
  };
  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // uint32 gate = 2;
  void clear_gate();
  uint32_t gate() const;
  void set_gate(uint32_t value);
  private:
  uint32_t _internal_gate() const;
  void _internal_set_gate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_service_register_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::ack_result* result_;
    uint32_t gate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_gate_forward_brd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_gate_forward_brd) */ {
 public:
  inline s_gate_forward_brd() : s_gate_forward_brd(nullptr) {}
  ~s_gate_forward_brd() override;
  explicit PROTOBUF_CONSTEXPR s_gate_forward_brd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_gate_forward_brd(const s_gate_forward_brd& from);
  s_gate_forward_brd(s_gate_forward_brd&& from) noexcept
    : s_gate_forward_brd() {
    *this = ::std::move(from);
  }

  inline s_gate_forward_brd& operator=(const s_gate_forward_brd& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_gate_forward_brd& operator=(s_gate_forward_brd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_gate_forward_brd& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_gate_forward_brd* internal_default_instance() {
    return reinterpret_cast<const s_gate_forward_brd*>(
               &_s_gate_forward_brd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(s_gate_forward_brd& a, s_gate_forward_brd& b) {
    a.Swap(&b);
  }
  inline void Swap(s_gate_forward_brd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_gate_forward_brd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_gate_forward_brd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_gate_forward_brd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_gate_forward_brd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_gate_forward_brd& from) {
    s_gate_forward_brd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_gate_forward_brd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_gate_forward_brd";
  }
  protected:
  explicit s_gate_forward_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kSessionFieldNumber = 4,
    kIdFieldNumber = 3,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // uint64 session = 4;
  void clear_session();
  uint64_t session() const;
  void set_session(uint64_t value);
  private:
  uint64_t _internal_session() const;
  void _internal_set_session(uint64_t value);
  public:

  // uint32 id = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_gate_forward_brd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t from_;
    uint32_t to_;
    uint64_t session_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_subscribe_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_subscribe_req) */ {
 public:
  inline s_service_subscribe_req() : s_service_subscribe_req(nullptr) {}
  ~s_service_subscribe_req() override;
  explicit PROTOBUF_CONSTEXPR s_service_subscribe_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_subscribe_req(const s_service_subscribe_req& from);
  s_service_subscribe_req(s_service_subscribe_req&& from) noexcept
    : s_service_subscribe_req() {
    *this = ::std::move(from);
  }

  inline s_service_subscribe_req& operator=(const s_service_subscribe_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_subscribe_req& operator=(s_service_subscribe_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_subscribe_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_subscribe_req* internal_default_instance() {
    return reinterpret_cast<const s_service_subscribe_req*>(
               &_s_service_subscribe_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(s_service_subscribe_req& a, s_service_subscribe_req& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_subscribe_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_subscribe_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_subscribe_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_subscribe_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_subscribe_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_subscribe_req& from) {
    s_service_subscribe_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_subscribe_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_subscribe_req";
  }
  protected:
  explicit s_service_subscribe_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTpFieldNumber = 1,
  };
  // .game.service_type tp = 1;
  void clear_tp();
  ::game::service_type tp() const;
  void set_tp(::game::service_type value);
  private:
  ::game::service_type _internal_tp() const;
  void _internal_set_tp(::game::service_type value);
  public:

  // @@protoc_insertion_point(class_scope:game.s_service_subscribe_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int tp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_subscribe_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_subscribe_ack) */ {
 public:
  inline s_service_subscribe_ack() : s_service_subscribe_ack(nullptr) {}
  ~s_service_subscribe_ack() override;
  explicit PROTOBUF_CONSTEXPR s_service_subscribe_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_subscribe_ack(const s_service_subscribe_ack& from);
  s_service_subscribe_ack(s_service_subscribe_ack&& from) noexcept
    : s_service_subscribe_ack() {
    *this = ::std::move(from);
  }

  inline s_service_subscribe_ack& operator=(const s_service_subscribe_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_subscribe_ack& operator=(s_service_subscribe_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_subscribe_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_subscribe_ack* internal_default_instance() {
    return reinterpret_cast<const s_service_subscribe_ack*>(
               &_s_service_subscribe_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(s_service_subscribe_ack& a, s_service_subscribe_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_subscribe_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_subscribe_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_subscribe_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_subscribe_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_subscribe_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_subscribe_ack& from) {
    s_service_subscribe_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_subscribe_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_subscribe_ack";
  }
  protected:
  explicit s_service_subscribe_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .game.s_service_info services = 2;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::game::s_service_info* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
      mutable_services();
  private:
  const ::game::s_service_info& _internal_services(int index) const;
  ::game::s_service_info* _internal_add_services();
  public:
  const ::game::s_service_info& services(int index) const;
  ::game::s_service_info* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
      services() const;

  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:game.s_service_subscribe_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info > services_;
    ::game::ack_result* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API s_service_subscribe_brd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.s_service_subscribe_brd) */ {
 public:
  inline s_service_subscribe_brd() : s_service_subscribe_brd(nullptr) {}
  ~s_service_subscribe_brd() override;
  explicit PROTOBUF_CONSTEXPR s_service_subscribe_brd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s_service_subscribe_brd(const s_service_subscribe_brd& from);
  s_service_subscribe_brd(s_service_subscribe_brd&& from) noexcept
    : s_service_subscribe_brd() {
    *this = ::std::move(from);
  }

  inline s_service_subscribe_brd& operator=(const s_service_subscribe_brd& from) {
    CopyFrom(from);
    return *this;
  }
  inline s_service_subscribe_brd& operator=(s_service_subscribe_brd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s_service_subscribe_brd& default_instance() {
    return *internal_default_instance();
  }
  static inline const s_service_subscribe_brd* internal_default_instance() {
    return reinterpret_cast<const s_service_subscribe_brd*>(
               &_s_service_subscribe_brd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(s_service_subscribe_brd& a, s_service_subscribe_brd& b) {
    a.Swap(&b);
  }
  inline void Swap(s_service_subscribe_brd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s_service_subscribe_brd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  s_service_subscribe_brd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<s_service_subscribe_brd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s_service_subscribe_brd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const s_service_subscribe_brd& from) {
    s_service_subscribe_brd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s_service_subscribe_brd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.s_service_subscribe_brd";
  }
  protected:
  explicit s_service_subscribe_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .game.s_service_info services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::game::s_service_info* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
      mutable_services();
  private:
  const ::game::s_service_info& _internal_services(int index) const;
  ::game::s_service_info* _internal_add_services();
  public:
  const ::game::s_service_info& services(int index) const;
  ::game::s_service_info* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
      services() const;

  // @@protoc_insertion_point(class_scope:game.s_service_subscribe_brd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info > services_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// s_service_info

// uint32 id = 1;
inline void s_service_info::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t s_service_info::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t s_service_info::id() const {
  // @@protoc_insertion_point(field_get:game.s_service_info.id)
  return _internal_id();
}
inline void s_service_info::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void s_service_info::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.s_service_info.id)
}

// .game.service_type tp = 2;
inline void s_service_info::clear_tp() {
  _impl_.tp_ = 0;
}
inline ::game::service_type s_service_info::_internal_tp() const {
  return static_cast< ::game::service_type >(_impl_.tp_);
}
inline ::game::service_type s_service_info::tp() const {
  // @@protoc_insertion_point(field_get:game.s_service_info.tp)
  return _internal_tp();
}
inline void s_service_info::_internal_set_tp(::game::service_type value) {
  
  _impl_.tp_ = value;
}
inline void s_service_info::set_tp(::game::service_type value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:game.s_service_info.tp)
}

// bool online = 3;
inline void s_service_info::clear_online() {
  _impl_.online_ = false;
}
inline bool s_service_info::_internal_online() const {
  return _impl_.online_;
}
inline bool s_service_info::online() const {
  // @@protoc_insertion_point(field_get:game.s_service_info.online)
  return _internal_online();
}
inline void s_service_info::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void s_service_info::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:game.s_service_info.online)
}

// -------------------------------------------------------------------

// s_gate_address

// string host = 1;
inline void s_gate_address::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& s_gate_address::host() const {
  // @@protoc_insertion_point(field_get:game.s_gate_address.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s_gate_address::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.s_gate_address.host)
}
inline std::string* s_gate_address::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:game.s_gate_address.host)
  return _s;
}
inline const std::string& s_gate_address::_internal_host() const {
  return _impl_.host_.Get();
}
inline void s_gate_address::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* s_gate_address::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* s_gate_address::release_host() {
  // @@protoc_insertion_point(field_release:game.s_gate_address.host)
  return _impl_.host_.Release();
}
inline void s_gate_address::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.s_gate_address.host)
}

// string port = 2;
inline void s_gate_address::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& s_gate_address::port() const {
  // @@protoc_insertion_point(field_get:game.s_gate_address.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s_gate_address::set_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.s_gate_address.port)
}
inline std::string* s_gate_address::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:game.s_gate_address.port)
  return _s;
}
inline const std::string& s_gate_address::_internal_port() const {
  return _impl_.port_.Get();
}
inline void s_gate_address::_internal_set_port(const std::string& value) {
  
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* s_gate_address::_internal_mutable_port() {
  
  return _impl_.port_.Mutable(GetArenaForAllocation());
}
inline std::string* s_gate_address::release_port() {
  // @@protoc_insertion_point(field_release:game.s_gate_address.port)
  return _impl_.port_.Release();
}
inline void s_gate_address::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  _impl_.port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.s_gate_address.port)
}

// -------------------------------------------------------------------

// s_gate_info

// uint32 id = 1;
inline void s_gate_info::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t s_gate_info::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t s_gate_info::id() const {
  // @@protoc_insertion_point(field_get:game.s_gate_info.id)
  return _internal_id();
}
inline void s_gate_info::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void s_gate_info::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.s_gate_info.id)
}

// repeated .game.s_service_info services = 2;
inline int s_gate_info::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int s_gate_info::services_size() const {
  return _internal_services_size();
}
inline void s_gate_info::clear_services() {
  _impl_.services_.Clear();
}
inline ::game::s_service_info* s_gate_info::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_gate_info.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
s_gate_info::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:game.s_gate_info.services)
  return &_impl_.services_;
}
inline const ::game::s_service_info& s_gate_info::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::game::s_service_info& s_gate_info::services(int index) const {
  // @@protoc_insertion_point(field_get:game.s_gate_info.services)
  return _internal_services(index);
}
inline ::game::s_service_info* s_gate_info::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::game::s_service_info* s_gate_info::add_services() {
  ::game::s_service_info* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:game.s_gate_info.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
s_gate_info::services() const {
  // @@protoc_insertion_point(field_list:game.s_gate_info.services)
  return _impl_.services_;
}

// repeated .game.s_gate_address addresses = 3;
inline int s_gate_info::_internal_addresses_size() const {
  return _impl_.addresses_.size();
}
inline int s_gate_info::addresses_size() const {
  return _internal_addresses_size();
}
inline void s_gate_info::clear_addresses() {
  _impl_.addresses_.Clear();
}
inline ::game::s_gate_address* s_gate_info::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_gate_info.addresses)
  return _impl_.addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_address >*
s_gate_info::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:game.s_gate_info.addresses)
  return &_impl_.addresses_;
}
inline const ::game::s_gate_address& s_gate_info::_internal_addresses(int index) const {
  return _impl_.addresses_.Get(index);
}
inline const ::game::s_gate_address& s_gate_info::addresses(int index) const {
  // @@protoc_insertion_point(field_get:game.s_gate_info.addresses)
  return _internal_addresses(index);
}
inline ::game::s_gate_address* s_gate_info::_internal_add_addresses() {
  return _impl_.addresses_.Add();
}
inline ::game::s_gate_address* s_gate_info::add_addresses() {
  ::game::s_gate_address* _add = _internal_add_addresses();
  // @@protoc_insertion_point(field_add:game.s_gate_info.addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_address >&
s_gate_info::addresses() const {
  // @@protoc_insertion_point(field_list:game.s_gate_info.addresses)
  return _impl_.addresses_;
}

// -------------------------------------------------------------------

// s_gate_register_req

// .game.s_gate_info info = 1;
inline bool s_gate_register_req::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool s_gate_register_req::has_info() const {
  return _internal_has_info();
}
inline void s_gate_register_req::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::game::s_gate_info& s_gate_register_req::_internal_info() const {
  const ::game::s_gate_info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::s_gate_info&>(
      ::game::_s_gate_info_default_instance_);
}
inline const ::game::s_gate_info& s_gate_register_req::info() const {
  // @@protoc_insertion_point(field_get:game.s_gate_register_req.info)
  return _internal_info();
}
inline void s_gate_register_req::unsafe_arena_set_allocated_info(
    ::game::s_gate_info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.s_gate_register_req.info)
}
inline ::game::s_gate_info* s_gate_register_req::release_info() {
  
  ::game::s_gate_info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::s_gate_info* s_gate_register_req::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:game.s_gate_register_req.info)
  
  ::game::s_gate_info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::game::s_gate_info* s_gate_register_req::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::s_gate_info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::game::s_gate_info* s_gate_register_req::mutable_info() {
  ::game::s_gate_info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:game.s_gate_register_req.info)
  return _msg;
}
inline void s_gate_register_req::set_allocated_info(::game::s_gate_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:game.s_gate_register_req.info)
}

// -------------------------------------------------------------------

// s_gate_register_ack

// .game.ack_result result = 1;
inline bool s_gate_register_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool s_gate_register_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& s_gate_register_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& s_gate_register_ack::result() const {
  // @@protoc_insertion_point(field_get:game.s_gate_register_ack.result)
  return _internal_result();
}
inline void s_gate_register_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.s_gate_register_ack.result)
}
inline ::game::ack_result* s_gate_register_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* s_gate_register_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.s_gate_register_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* s_gate_register_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* s_gate_register_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.s_gate_register_ack.result)
  return _msg;
}
inline void s_gate_register_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.s_gate_register_ack.result)
}

// repeated .game.s_gate_info gates = 2;
inline int s_gate_register_ack::_internal_gates_size() const {
  return _impl_.gates_.size();
}
inline int s_gate_register_ack::gates_size() const {
  return _internal_gates_size();
}
inline void s_gate_register_ack::clear_gates() {
  _impl_.gates_.Clear();
}
inline ::game::s_gate_info* s_gate_register_ack::mutable_gates(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_gate_register_ack.gates)
  return _impl_.gates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >*
s_gate_register_ack::mutable_gates() {
  // @@protoc_insertion_point(field_mutable_list:game.s_gate_register_ack.gates)
  return &_impl_.gates_;
}
inline const ::game::s_gate_info& s_gate_register_ack::_internal_gates(int index) const {
  return _impl_.gates_.Get(index);
}
inline const ::game::s_gate_info& s_gate_register_ack::gates(int index) const {
  // @@protoc_insertion_point(field_get:game.s_gate_register_ack.gates)
  return _internal_gates(index);
}
inline ::game::s_gate_info* s_gate_register_ack::_internal_add_gates() {
  return _impl_.gates_.Add();
}
inline ::game::s_gate_info* s_gate_register_ack::add_gates() {
  ::game::s_gate_info* _add = _internal_add_gates();
  // @@protoc_insertion_point(field_add:game.s_gate_register_ack.gates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >&
s_gate_register_ack::gates() const {
  // @@protoc_insertion_point(field_list:game.s_gate_register_ack.gates)
  return _impl_.gates_;
}

// -------------------------------------------------------------------

// s_gate_register_brd

// repeated .game.s_gate_info gates = 1;
inline int s_gate_register_brd::_internal_gates_size() const {
  return _impl_.gates_.size();
}
inline int s_gate_register_brd::gates_size() const {
  return _internal_gates_size();
}
inline void s_gate_register_brd::clear_gates() {
  _impl_.gates_.Clear();
}
inline ::game::s_gate_info* s_gate_register_brd::mutable_gates(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_gate_register_brd.gates)
  return _impl_.gates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >*
s_gate_register_brd::mutable_gates() {
  // @@protoc_insertion_point(field_mutable_list:game.s_gate_register_brd.gates)
  return &_impl_.gates_;
}
inline const ::game::s_gate_info& s_gate_register_brd::_internal_gates(int index) const {
  return _impl_.gates_.Get(index);
}
inline const ::game::s_gate_info& s_gate_register_brd::gates(int index) const {
  // @@protoc_insertion_point(field_get:game.s_gate_register_brd.gates)
  return _internal_gates(index);
}
inline ::game::s_gate_info* s_gate_register_brd::_internal_add_gates() {
  return _impl_.gates_.Add();
}
inline ::game::s_gate_info* s_gate_register_brd::add_gates() {
  ::game::s_gate_info* _add = _internal_add_gates();
  // @@protoc_insertion_point(field_add:game.s_gate_register_brd.gates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_gate_info >&
s_gate_register_brd::gates() const {
  // @@protoc_insertion_point(field_list:game.s_gate_register_brd.gates)
  return _impl_.gates_;
}

// -------------------------------------------------------------------

// s_service_update_req

// repeated .game.s_service_info services = 1;
inline int s_service_update_req::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int s_service_update_req::services_size() const {
  return _internal_services_size();
}
inline void s_service_update_req::clear_services() {
  _impl_.services_.Clear();
}
inline ::game::s_service_info* s_service_update_req::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_service_update_req.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
s_service_update_req::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:game.s_service_update_req.services)
  return &_impl_.services_;
}
inline const ::game::s_service_info& s_service_update_req::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::game::s_service_info& s_service_update_req::services(int index) const {
  // @@protoc_insertion_point(field_get:game.s_service_update_req.services)
  return _internal_services(index);
}
inline ::game::s_service_info* s_service_update_req::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::game::s_service_info* s_service_update_req::add_services() {
  ::game::s_service_info* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:game.s_service_update_req.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
s_service_update_req::services() const {
  // @@protoc_insertion_point(field_list:game.s_service_update_req.services)
  return _impl_.services_;
}

// -------------------------------------------------------------------

// s_service_shm

// string name = 1;
inline void s_service_shm::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& s_service_shm::name() const {
  // @@protoc_insertion_point(field_get:game.s_service_shm.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s_service_shm::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.s_service_shm.name)
}
inline std::string* s_service_shm::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.s_service_shm.name)
  return _s;
}
inline const std::string& s_service_shm::_internal_name() const {
  return _impl_.name_.Get();
}
inline void s_service_shm::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* s_service_shm::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* s_service_shm::release_name() {
  // @@protoc_insertion_point(field_release:game.s_service_shm.name)
  return _impl_.name_.Release();
}
inline void s_service_shm::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.s_service_shm.name)
}

// uint32 size = 2;
inline void s_service_shm::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t s_service_shm::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t s_service_shm::size() const {
  // @@protoc_insertion_point(field_get:game.s_service_shm.size)
  return _internal_size();
}
inline void s_service_shm::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void s_service_shm::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:game.s_service_shm.size)
}

// -------------------------------------------------------------------

// s_service_register_req

// .game.s_service_info info = 1;
inline bool s_service_register_req::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool s_service_register_req::has_info() const {
  return _internal_has_info();
}
inline void s_service_register_req::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::game::s_service_info& s_service_register_req::_internal_info() const {
  const ::game::s_service_info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::s_service_info&>(
      ::game::_s_service_info_default_instance_);
}
inline const ::game::s_service_info& s_service_register_req::info() const {
  // @@protoc_insertion_point(field_get:game.s_service_register_req.info)
  return _internal_info();
}
inline void s_service_register_req::unsafe_arena_set_allocated_info(
    ::game::s_service_info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.s_service_register_req.info)
}
inline ::game::s_service_info* s_service_register_req::release_info() {
  
  ::game::s_service_info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::s_service_info* s_service_register_req::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:game.s_service_register_req.info)
  
  ::game::s_service_info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::game::s_service_info* s_service_register_req::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::s_service_info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::game::s_service_info* s_service_register_req::mutable_info() {
  ::game::s_service_info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:game.s_service_register_req.info)
  return _msg;
}
inline void s_service_register_req::set_allocated_info(::game::s_service_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:game.s_service_register_req.info)
}

// uint32 channel_size = 2;
inline void s_service_register_req::clear_channel_size() {
  _impl_.channel_size_ = 0u;
}
inline uint32_t s_service_register_req::_internal_channel_size() const {
  return _impl_.channel_size_;
}
inline uint32_t s_service_register_req::channel_size() const {
  // @@protoc_insertion_point(field_get:game.s_service_register_req.channel_size)
  return _internal_channel_size();
}
inline void s_service_register_req::_internal_set_channel_size(uint32_t value) {
  
  _impl_.channel_size_ = value;
}
inline void s_service_register_req::set_channel_size(uint32_t value) {
  _internal_set_channel_size(value);
  // @@protoc_insertion_point(field_set:game.s_service_register_req.channel_size)
}

// repeated .game.s_service_shm shm = 3;
inline int s_service_register_req::_internal_shm_size() const {
  return _impl_.shm_.size();
}
inline int s_service_register_req::shm_size() const {
  return _internal_shm_size();
}
inline void s_service_register_req::clear_shm() {
  _impl_.shm_.Clear();
}
inline ::game::s_service_shm* s_service_register_req::mutable_shm(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_service_register_req.shm)
  return _impl_.shm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_shm >*
s_service_register_req::mutable_shm() {
  // @@protoc_insertion_point(field_mutable_list:game.s_service_register_req.shm)
  return &_impl_.shm_;
}
inline const ::game::s_service_shm& s_service_register_req::_internal_shm(int index) const {
  return _impl_.shm_.Get(index);
}
inline const ::game::s_service_shm& s_service_register_req::shm(int index) const {
  // @@protoc_insertion_point(field_get:game.s_service_register_req.shm)
  return _internal_shm(index);
}
inline ::game::s_service_shm* s_service_register_req::_internal_add_shm() {
  return _impl_.shm_.Add();
}
inline ::game::s_service_shm* s_service_register_req::add_shm() {
  ::game::s_service_shm* _add = _internal_add_shm();
  // @@protoc_insertion_point(field_add:game.s_service_register_req.shm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_shm >&
s_service_register_req::shm() const {
  // @@protoc_insertion_point(field_list:game.s_service_register_req.shm)
  return _impl_.shm_;
}

// -------------------------------------------------------------------

// s_service_register_ack

// .game.ack_result result = 1;
inline bool s_service_register_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool s_service_register_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& s_service_register_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& s_service_register_ack::result() const {
  // @@protoc_insertion_point(field_get:game.s_service_register_ack.result)
  return _internal_result();
}
inline void s_service_register_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.s_service_register_ack.result)
}
inline ::game::ack_result* s_service_register_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* s_service_register_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.s_service_register_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* s_service_register_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* s_service_register_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.s_service_register_ack.result)
  return _msg;
}
inline void s_service_register_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.s_service_register_ack.result)
}

// uint32 gate = 2;
inline void s_service_register_ack::clear_gate() {
  _impl_.gate_ = 0u;
}
inline uint32_t s_service_register_ack::_internal_gate() const {
  return _impl_.gate_;
}
inline uint32_t s_service_register_ack::gate() const {
  // @@protoc_insertion_point(field_get:game.s_service_register_ack.gate)
  return _internal_gate();
}
inline void s_service_register_ack::_internal_set_gate(uint32_t value) {
  
  _impl_.gate_ = value;
}
inline void s_service_register_ack::set_gate(uint32_t value) {
  _internal_set_gate(value);
  // @@protoc_insertion_point(field_set:game.s_service_register_ack.gate)
}

// -------------------------------------------------------------------

// s_gate_forward_brd

// uint32 from = 1;
inline void s_gate_forward_brd::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t s_gate_forward_brd::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t s_gate_forward_brd::from() const {
  // @@protoc_insertion_point(field_get:game.s_gate_forward_brd.from)
  return _internal_from();
}
inline void s_gate_forward_brd::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void s_gate_forward_brd::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:game.s_gate_forward_brd.from)
}

// uint32 to = 2;
inline void s_gate_forward_brd::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t s_gate_forward_brd::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t s_gate_forward_brd::to() const {
  // @@protoc_insertion_point(field_get:game.s_gate_forward_brd.to)
  return _internal_to();
}
inline void s_gate_forward_brd::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void s_gate_forward_brd::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:game.s_gate_forward_brd.to)
}

// uint32 id = 3;
inline void s_gate_forward_brd::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t s_gate_forward_brd::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t s_gate_forward_brd::id() const {
  // @@protoc_insertion_point(field_get:game.s_gate_forward_brd.id)
  return _internal_id();
}
inline void s_gate_forward_brd::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void s_gate_forward_brd::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.s_gate_forward_brd.id)
}

// uint64 session = 4;
inline void s_gate_forward_brd::clear_session() {
  _impl_.session_ = uint64_t{0u};
}
inline uint64_t s_gate_forward_brd::_internal_session() const {
  return _impl_.session_;
}
inline uint64_t s_gate_forward_brd::session() const {
  // @@protoc_insertion_point(field_get:game.s_gate_forward_brd.session)
  return _internal_session();
}
inline void s_gate_forward_brd::_internal_set_session(uint64_t value) {
  
  _impl_.session_ = value;
}
inline void s_gate_forward_brd::set_session(uint64_t value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:game.s_gate_forward_brd.session)
}

// bytes data = 5;
inline void s_gate_forward_brd::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& s_gate_forward_brd::data() const {
  // @@protoc_insertion_point(field_get:game.s_gate_forward_brd.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s_gate_forward_brd::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.s_gate_forward_brd.data)
}
inline std::string* s_gate_forward_brd::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:game.s_gate_forward_brd.data)
  return _s;
}
inline const std::string& s_gate_forward_brd::_internal_data() const {
  return _impl_.data_.Get();
}
inline void s_gate_forward_brd::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* s_gate_forward_brd::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* s_gate_forward_brd::release_data() {
  // @@protoc_insertion_point(field_release:game.s_gate_forward_brd.data)
  return _impl_.data_.Release();
}
inline void s_gate_forward_brd::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.s_gate_forward_brd.data)
}

// -------------------------------------------------------------------

// s_service_subscribe_req

// .game.service_type tp = 1;
inline void s_service_subscribe_req::clear_tp() {
  _impl_.tp_ = 0;
}
inline ::game::service_type s_service_subscribe_req::_internal_tp() const {
  return static_cast< ::game::service_type >(_impl_.tp_);
}
inline ::game::service_type s_service_subscribe_req::tp() const {
  // @@protoc_insertion_point(field_get:game.s_service_subscribe_req.tp)
  return _internal_tp();
}
inline void s_service_subscribe_req::_internal_set_tp(::game::service_type value) {
  
  _impl_.tp_ = value;
}
inline void s_service_subscribe_req::set_tp(::game::service_type value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:game.s_service_subscribe_req.tp)
}

// -------------------------------------------------------------------

// s_service_subscribe_ack

// .game.ack_result result = 1;
inline bool s_service_subscribe_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool s_service_subscribe_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& s_service_subscribe_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& s_service_subscribe_ack::result() const {
  // @@protoc_insertion_point(field_get:game.s_service_subscribe_ack.result)
  return _internal_result();
}
inline void s_service_subscribe_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.s_service_subscribe_ack.result)
}
inline ::game::ack_result* s_service_subscribe_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* s_service_subscribe_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.s_service_subscribe_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* s_service_subscribe_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* s_service_subscribe_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.s_service_subscribe_ack.result)
  return _msg;
}
inline void s_service_subscribe_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.s_service_subscribe_ack.result)
}

// repeated .game.s_service_info services = 2;
inline int s_service_subscribe_ack::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int s_service_subscribe_ack::services_size() const {
  return _internal_services_size();
}
inline void s_service_subscribe_ack::clear_services() {
  _impl_.services_.Clear();
}
inline ::game::s_service_info* s_service_subscribe_ack::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_service_subscribe_ack.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
s_service_subscribe_ack::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:game.s_service_subscribe_ack.services)
  return &_impl_.services_;
}
inline const ::game::s_service_info& s_service_subscribe_ack::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::game::s_service_info& s_service_subscribe_ack::services(int index) const {
  // @@protoc_insertion_point(field_get:game.s_service_subscribe_ack.services)
  return _internal_services(index);
}
inline ::game::s_service_info* s_service_subscribe_ack::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::game::s_service_info* s_service_subscribe_ack::add_services() {
  ::game::s_service_info* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:game.s_service_subscribe_ack.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
s_service_subscribe_ack::services() const {
  // @@protoc_insertion_point(field_list:game.s_service_subscribe_ack.services)
  return _impl_.services_;
}

// -------------------------------------------------------------------

// s_service_subscribe_brd

// repeated .game.s_service_info services = 1;
inline int s_service_subscribe_brd::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int s_service_subscribe_brd::services_size() const {
  return _internal_services_size();
}
inline void s_service_subscribe_brd::clear_services() {
  _impl_.services_.Clear();
}
inline ::game::s_service_info* s_service_subscribe_brd::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:game.s_service_subscribe_brd.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >*
s_service_subscribe_brd::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:game.s_service_subscribe_brd.services)
  return &_impl_.services_;
}
inline const ::game::s_service_info& s_service_subscribe_brd::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::game::s_service_info& s_service_subscribe_brd::services(int index) const {
  // @@protoc_insertion_point(field_get:game.s_service_subscribe_brd.services)
  return _internal_services(index);
}
inline ::game::s_service_info* s_service_subscribe_brd::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::game::s_service_info* s_service_subscribe_brd::add_services() {
  ::game::s_service_info* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:game.s_service_subscribe_brd.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::s_service_info >&
s_service_subscribe_brd::services() const {
  // @@protoc_insertion_point(field_list:game.s_service_subscribe_brd.services)
  return _impl_.services_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::service_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::service_type>() {
  return ::game::service_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fserver_2eproto
