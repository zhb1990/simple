// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fclient_2eproto

#include <proto.hpp>
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fclient_2eproto PROTO_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTO_API TableStruct_msg_5fclient_2eproto {
  static const uint32_t offsets[];
};
PROTO_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fclient_2eproto;
namespace game {
class enter_room_ack;
struct enter_room_ackDefaultTypeInternal;
PROTO_API extern enter_room_ackDefaultTypeInternal _enter_room_ack_default_instance_;
class login_ack;
struct login_ackDefaultTypeInternal;
PROTO_API extern login_ackDefaultTypeInternal _login_ack_default_instance_;
class login_req;
struct login_reqDefaultTypeInternal;
PROTO_API extern login_reqDefaultTypeInternal _login_req_default_instance_;
class move_ack;
struct move_ackDefaultTypeInternal;
PROTO_API extern move_ackDefaultTypeInternal _move_ack_default_instance_;
class move_brd;
struct move_brdDefaultTypeInternal;
PROTO_API extern move_brdDefaultTypeInternal _move_brd_default_instance_;
class move_req;
struct move_reqDefaultTypeInternal;
PROTO_API extern move_reqDefaultTypeInternal _move_req_default_instance_;
class user_info_lite;
struct user_info_liteDefaultTypeInternal;
PROTO_API extern user_info_liteDefaultTypeInternal _user_info_lite_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTO_API ::game::enter_room_ack* Arena::CreateMaybeMessage<::game::enter_room_ack>(Arena*);
template<> PROTO_API ::game::login_ack* Arena::CreateMaybeMessage<::game::login_ack>(Arena*);
template<> PROTO_API ::game::login_req* Arena::CreateMaybeMessage<::game::login_req>(Arena*);
template<> PROTO_API ::game::move_ack* Arena::CreateMaybeMessage<::game::move_ack>(Arena*);
template<> PROTO_API ::game::move_brd* Arena::CreateMaybeMessage<::game::move_brd>(Arena*);
template<> PROTO_API ::game::move_req* Arena::CreateMaybeMessage<::game::move_req>(Arena*);
template<> PROTO_API ::game::user_info_lite* Arena::CreateMaybeMessage<::game::user_info_lite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum game_result : int {
  none = 0,
  win = 1,
  lose = 2,
  draw = 3,
  game_result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  game_result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTO_API bool game_result_IsValid(int value);
constexpr game_result game_result_MIN = none;
constexpr game_result game_result_MAX = draw;
constexpr int game_result_ARRAYSIZE = game_result_MAX + 1;

PROTO_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* game_result_descriptor();
template<typename T>
inline const std::string& game_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, game_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function game_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    game_result_descriptor(), enum_t_value);
}
inline bool game_result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, game_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<game_result>(
    game_result_descriptor(), name, value);
}
// ===================================================================

class PROTO_API user_info_lite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_info_lite) */ {
 public:
  inline user_info_lite() : user_info_lite(nullptr) {}
  ~user_info_lite() override;
  explicit PROTOBUF_CONSTEXPR user_info_lite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_info_lite(const user_info_lite& from);
  user_info_lite(user_info_lite&& from) noexcept
    : user_info_lite() {
    *this = ::std::move(from);
  }

  inline user_info_lite& operator=(const user_info_lite& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info_lite& operator=(user_info_lite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_info_lite& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_info_lite* internal_default_instance() {
    return reinterpret_cast<const user_info_lite*>(
               &_user_info_lite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(user_info_lite& a, user_info_lite& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info_lite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info_lite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user_info_lite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user_info_lite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_info_lite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const user_info_lite& from) {
    user_info_lite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info_lite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_info_lite";
  }
  protected:
  explicit user_info_lite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int32 userid = 2;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.user_info_lite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API login_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.login_req) */ {
 public:
  inline login_req() : login_req(nullptr) {}
  ~login_req() override;
  explicit PROTOBUF_CONSTEXPR login_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_req(const login_req& from);
  login_req(login_req&& from) noexcept
    : login_req() {
    *this = ::std::move(from);
  }

  inline login_req& operator=(const login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_req& operator=(login_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_req* internal_default_instance() {
    return reinterpret_cast<const login_req*>(
               &_login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_req& a, login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(login_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_req& from) {
    login_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.login_req";
  }
  protected:
  explicit login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:game.login_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API login_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.login_ack) */ {
 public:
  inline login_ack() : login_ack(nullptr) {}
  ~login_ack() override;
  explicit PROTOBUF_CONSTEXPR login_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_ack(const login_ack& from);
  login_ack(login_ack&& from) noexcept
    : login_ack() {
    *this = ::std::move(from);
  }

  inline login_ack& operator=(const login_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_ack& operator=(login_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_ack* internal_default_instance() {
    return reinterpret_cast<const login_ack*>(
               &_login_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(login_ack& a, login_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(login_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_ack& from) {
    login_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.login_ack";
  }
  protected:
  explicit login_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUseridFieldNumber = 2,
    kHasMatchFieldNumber = 3,
    kWinCountFieldNumber = 4,
    kLoseCountFieldNumber = 5,
  };
  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // int32 userid = 2;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // bool has_match = 3;
  void clear_has_match();
  bool has_match() const;
  void set_has_match(bool value);
  private:
  bool _internal_has_match() const;
  void _internal_set_has_match(bool value);
  public:

  // uint32 win_count = 4;
  void clear_win_count();
  uint32_t win_count() const;
  void set_win_count(uint32_t value);
  private:
  uint32_t _internal_win_count() const;
  void _internal_set_win_count(uint32_t value);
  public:

  // uint32 lose_count = 5;
  void clear_lose_count();
  uint32_t lose_count() const;
  void set_lose_count(uint32_t value);
  private:
  uint32_t _internal_lose_count() const;
  void _internal_set_lose_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.login_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::ack_result* result_;
    int32_t userid_;
    bool has_match_;
    uint32_t win_count_;
    uint32_t lose_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API enter_room_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.enter_room_ack) */ {
 public:
  inline enter_room_ack() : enter_room_ack(nullptr) {}
  ~enter_room_ack() override;
  explicit PROTOBUF_CONSTEXPR enter_room_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  enter_room_ack(const enter_room_ack& from);
  enter_room_ack(enter_room_ack&& from) noexcept
    : enter_room_ack() {
    *this = ::std::move(from);
  }

  inline enter_room_ack& operator=(const enter_room_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline enter_room_ack& operator=(enter_room_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const enter_room_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const enter_room_ack* internal_default_instance() {
    return reinterpret_cast<const enter_room_ack*>(
               &_enter_room_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(enter_room_ack& a, enter_room_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(enter_room_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enter_room_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  enter_room_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<enter_room_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const enter_room_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const enter_room_ack& from) {
    enter_room_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enter_room_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.enter_room_ack";
  }
  protected:
  explicit enter_room_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteFieldNumber = 5,
    kBlackFieldNumber = 6,
    kResultFieldNumber = 1,
    kOpponentFieldNumber = 4,
    kIsBlackFieldNumber = 2,
    kIsMyTurnFieldNumber = 3,
  };
  // repeated uint32 white = 5;
  int white_size() const;
  private:
  int _internal_white_size() const;
  public:
  void clear_white();
  private:
  uint32_t _internal_white(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_white() const;
  void _internal_add_white(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_white();
  public:
  uint32_t white(int index) const;
  void set_white(int index, uint32_t value);
  void add_white(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      white() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_white();

  // repeated uint32 black = 6;
  int black_size() const;
  private:
  int _internal_black_size() const;
  public:
  void clear_black();
  private:
  uint32_t _internal_black(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_black() const;
  void _internal_add_black(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_black();
  public:
  uint32_t black(int index) const;
  void set_black(int index, uint32_t value);
  void add_black(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      black() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_black();

  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // .game.user_info_lite opponent = 4;
  bool has_opponent() const;
  private:
  bool _internal_has_opponent() const;
  public:
  void clear_opponent();
  const ::game::user_info_lite& opponent() const;
  PROTOBUF_NODISCARD ::game::user_info_lite* release_opponent();
  ::game::user_info_lite* mutable_opponent();
  void set_allocated_opponent(::game::user_info_lite* opponent);
  private:
  const ::game::user_info_lite& _internal_opponent() const;
  ::game::user_info_lite* _internal_mutable_opponent();
  public:
  void unsafe_arena_set_allocated_opponent(
      ::game::user_info_lite* opponent);
  ::game::user_info_lite* unsafe_arena_release_opponent();

  // bool is_black = 2;
  void clear_is_black();
  bool is_black() const;
  void set_is_black(bool value);
  private:
  bool _internal_is_black() const;
  void _internal_set_is_black(bool value);
  public:

  // bool is_my_turn = 3;
  void clear_is_my_turn();
  bool is_my_turn() const;
  void set_is_my_turn(bool value);
  private:
  bool _internal_is_my_turn() const;
  void _internal_set_is_my_turn(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.enter_room_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > white_;
    mutable std::atomic<int> _white_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > black_;
    mutable std::atomic<int> _black_cached_byte_size_;
    ::game::ack_result* result_;
    ::game::user_info_lite* opponent_;
    bool is_black_;
    bool is_my_turn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API move_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.move_req) */ {
 public:
  inline move_req() : move_req(nullptr) {}
  ~move_req() override;
  explicit PROTOBUF_CONSTEXPR move_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  move_req(const move_req& from);
  move_req(move_req&& from) noexcept
    : move_req() {
    *this = ::std::move(from);
  }

  inline move_req& operator=(const move_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline move_req& operator=(move_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const move_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const move_req* internal_default_instance() {
    return reinterpret_cast<const move_req*>(
               &_move_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(move_req& a, move_req& b) {
    a.Swap(&b);
  }
  inline void Swap(move_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(move_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  move_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<move_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const move_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const move_req& from) {
    move_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(move_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.move_req";
  }
  protected:
  explicit move_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint32 x = 1;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 2;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.move_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API move_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.move_ack) */ {
 public:
  inline move_ack() : move_ack(nullptr) {}
  ~move_ack() override;
  explicit PROTOBUF_CONSTEXPR move_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  move_ack(const move_ack& from);
  move_ack(move_ack&& from) noexcept
    : move_ack() {
    *this = ::std::move(from);
  }

  inline move_ack& operator=(const move_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline move_ack& operator=(move_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const move_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const move_ack* internal_default_instance() {
    return reinterpret_cast<const move_ack*>(
               &_move_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(move_ack& a, move_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(move_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(move_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  move_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<move_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const move_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const move_ack& from) {
    move_ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(move_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.move_ack";
  }
  protected:
  explicit move_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kGameFieldNumber = 2,
  };
  // .game.ack_result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::game::ack_result& result() const;
  PROTOBUF_NODISCARD ::game::ack_result* release_result();
  ::game::ack_result* mutable_result();
  void set_allocated_result(::game::ack_result* result);
  private:
  const ::game::ack_result& _internal_result() const;
  ::game::ack_result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::game::ack_result* result);
  ::game::ack_result* unsafe_arena_release_result();

  // .game.game_result game = 2;
  void clear_game();
  ::game::game_result game() const;
  void set_game(::game::game_result value);
  private:
  ::game::game_result _internal_game() const;
  void _internal_set_game(::game::game_result value);
  public:

  // @@protoc_insertion_point(class_scope:game.move_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::ack_result* result_;
    int game_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PROTO_API move_brd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.move_brd) */ {
 public:
  inline move_brd() : move_brd(nullptr) {}
  ~move_brd() override;
  explicit PROTOBUF_CONSTEXPR move_brd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  move_brd(const move_brd& from);
  move_brd(move_brd&& from) noexcept
    : move_brd() {
    *this = ::std::move(from);
  }

  inline move_brd& operator=(const move_brd& from) {
    CopyFrom(from);
    return *this;
  }
  inline move_brd& operator=(move_brd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const move_brd& default_instance() {
    return *internal_default_instance();
  }
  static inline const move_brd* internal_default_instance() {
    return reinterpret_cast<const move_brd*>(
               &_move_brd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(move_brd& a, move_brd& b) {
    a.Swap(&b);
  }
  inline void Swap(move_brd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(move_brd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  move_brd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<move_brd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const move_brd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const move_brd& from) {
    move_brd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(move_brd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.move_brd";
  }
  protected:
  explicit move_brd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kGameFieldNumber = 3,
  };
  // uint32 x = 1;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 2;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // .game.game_result game = 3;
  void clear_game();
  ::game::game_result game() const;
  void set_game(::game::game_result value);
  private:
  ::game::game_result _internal_game() const;
  void _internal_set_game(::game::game_result value);
  public:

  // @@protoc_insertion_point(class_scope:game.move_brd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x_;
    uint32_t y_;
    int game_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// user_info_lite

// string account = 1;
inline void user_info_lite::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& user_info_lite::account() const {
  // @@protoc_insertion_point(field_get:game.user_info_lite.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_info_lite::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.user_info_lite.account)
}
inline std::string* user_info_lite::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:game.user_info_lite.account)
  return _s;
}
inline const std::string& user_info_lite::_internal_account() const {
  return _impl_.account_.Get();
}
inline void user_info_lite::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* user_info_lite::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* user_info_lite::release_account() {
  // @@protoc_insertion_point(field_release:game.user_info_lite.account)
  return _impl_.account_.Release();
}
inline void user_info_lite::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.user_info_lite.account)
}

// int32 userid = 2;
inline void user_info_lite::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t user_info_lite::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t user_info_lite::userid() const {
  // @@protoc_insertion_point(field_get:game.user_info_lite.userid)
  return _internal_userid();
}
inline void user_info_lite::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void user_info_lite::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:game.user_info_lite.userid)
}

// -------------------------------------------------------------------

// login_req

// string account = 1;
inline void login_req::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& login_req::account() const {
  // @@protoc_insertion_point(field_get:game.login_req.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_req::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.login_req.account)
}
inline std::string* login_req::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:game.login_req.account)
  return _s;
}
inline const std::string& login_req::_internal_account() const {
  return _impl_.account_.Get();
}
inline void login_req::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* login_req::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* login_req::release_account() {
  // @@protoc_insertion_point(field_release:game.login_req.account)
  return _impl_.account_.Release();
}
inline void login_req::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.login_req.account)
}

// string password = 2;
inline void login_req::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& login_req::password() const {
  // @@protoc_insertion_point(field_get:game.login_req.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_req::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.login_req.password)
}
inline std::string* login_req::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:game.login_req.password)
  return _s;
}
inline const std::string& login_req::_internal_password() const {
  return _impl_.password_.Get();
}
inline void login_req::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* login_req::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* login_req::release_password() {
  // @@protoc_insertion_point(field_release:game.login_req.password)
  return _impl_.password_.Release();
}
inline void login_req::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.login_req.password)
}

// -------------------------------------------------------------------

// login_ack

// .game.ack_result result = 1;
inline bool login_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool login_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& login_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& login_ack::result() const {
  // @@protoc_insertion_point(field_get:game.login_ack.result)
  return _internal_result();
}
inline void login_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.login_ack.result)
}
inline ::game::ack_result* login_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* login_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.login_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* login_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* login_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.login_ack.result)
  return _msg;
}
inline void login_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.login_ack.result)
}

// int32 userid = 2;
inline void login_ack::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t login_ack::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t login_ack::userid() const {
  // @@protoc_insertion_point(field_get:game.login_ack.userid)
  return _internal_userid();
}
inline void login_ack::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void login_ack::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:game.login_ack.userid)
}

// bool has_match = 3;
inline void login_ack::clear_has_match() {
  _impl_.has_match_ = false;
}
inline bool login_ack::_internal_has_match() const {
  return _impl_.has_match_;
}
inline bool login_ack::has_match() const {
  // @@protoc_insertion_point(field_get:game.login_ack.has_match)
  return _internal_has_match();
}
inline void login_ack::_internal_set_has_match(bool value) {
  
  _impl_.has_match_ = value;
}
inline void login_ack::set_has_match(bool value) {
  _internal_set_has_match(value);
  // @@protoc_insertion_point(field_set:game.login_ack.has_match)
}

// uint32 win_count = 4;
inline void login_ack::clear_win_count() {
  _impl_.win_count_ = 0u;
}
inline uint32_t login_ack::_internal_win_count() const {
  return _impl_.win_count_;
}
inline uint32_t login_ack::win_count() const {
  // @@protoc_insertion_point(field_get:game.login_ack.win_count)
  return _internal_win_count();
}
inline void login_ack::_internal_set_win_count(uint32_t value) {
  
  _impl_.win_count_ = value;
}
inline void login_ack::set_win_count(uint32_t value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:game.login_ack.win_count)
}

// uint32 lose_count = 5;
inline void login_ack::clear_lose_count() {
  _impl_.lose_count_ = 0u;
}
inline uint32_t login_ack::_internal_lose_count() const {
  return _impl_.lose_count_;
}
inline uint32_t login_ack::lose_count() const {
  // @@protoc_insertion_point(field_get:game.login_ack.lose_count)
  return _internal_lose_count();
}
inline void login_ack::_internal_set_lose_count(uint32_t value) {
  
  _impl_.lose_count_ = value;
}
inline void login_ack::set_lose_count(uint32_t value) {
  _internal_set_lose_count(value);
  // @@protoc_insertion_point(field_set:game.login_ack.lose_count)
}

// -------------------------------------------------------------------

// enter_room_ack

// .game.ack_result result = 1;
inline bool enter_room_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool enter_room_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& enter_room_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& enter_room_ack::result() const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.result)
  return _internal_result();
}
inline void enter_room_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.enter_room_ack.result)
}
inline ::game::ack_result* enter_room_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* enter_room_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.enter_room_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* enter_room_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* enter_room_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.enter_room_ack.result)
  return _msg;
}
inline void enter_room_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.enter_room_ack.result)
}

// bool is_black = 2;
inline void enter_room_ack::clear_is_black() {
  _impl_.is_black_ = false;
}
inline bool enter_room_ack::_internal_is_black() const {
  return _impl_.is_black_;
}
inline bool enter_room_ack::is_black() const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.is_black)
  return _internal_is_black();
}
inline void enter_room_ack::_internal_set_is_black(bool value) {
  
  _impl_.is_black_ = value;
}
inline void enter_room_ack::set_is_black(bool value) {
  _internal_set_is_black(value);
  // @@protoc_insertion_point(field_set:game.enter_room_ack.is_black)
}

// bool is_my_turn = 3;
inline void enter_room_ack::clear_is_my_turn() {
  _impl_.is_my_turn_ = false;
}
inline bool enter_room_ack::_internal_is_my_turn() const {
  return _impl_.is_my_turn_;
}
inline bool enter_room_ack::is_my_turn() const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.is_my_turn)
  return _internal_is_my_turn();
}
inline void enter_room_ack::_internal_set_is_my_turn(bool value) {
  
  _impl_.is_my_turn_ = value;
}
inline void enter_room_ack::set_is_my_turn(bool value) {
  _internal_set_is_my_turn(value);
  // @@protoc_insertion_point(field_set:game.enter_room_ack.is_my_turn)
}

// .game.user_info_lite opponent = 4;
inline bool enter_room_ack::_internal_has_opponent() const {
  return this != internal_default_instance() && _impl_.opponent_ != nullptr;
}
inline bool enter_room_ack::has_opponent() const {
  return _internal_has_opponent();
}
inline void enter_room_ack::clear_opponent() {
  if (GetArenaForAllocation() == nullptr && _impl_.opponent_ != nullptr) {
    delete _impl_.opponent_;
  }
  _impl_.opponent_ = nullptr;
}
inline const ::game::user_info_lite& enter_room_ack::_internal_opponent() const {
  const ::game::user_info_lite* p = _impl_.opponent_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::user_info_lite&>(
      ::game::_user_info_lite_default_instance_);
}
inline const ::game::user_info_lite& enter_room_ack::opponent() const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.opponent)
  return _internal_opponent();
}
inline void enter_room_ack::unsafe_arena_set_allocated_opponent(
    ::game::user_info_lite* opponent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opponent_);
  }
  _impl_.opponent_ = opponent;
  if (opponent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.enter_room_ack.opponent)
}
inline ::game::user_info_lite* enter_room_ack::release_opponent() {
  
  ::game::user_info_lite* temp = _impl_.opponent_;
  _impl_.opponent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::user_info_lite* enter_room_ack::unsafe_arena_release_opponent() {
  // @@protoc_insertion_point(field_release:game.enter_room_ack.opponent)
  
  ::game::user_info_lite* temp = _impl_.opponent_;
  _impl_.opponent_ = nullptr;
  return temp;
}
inline ::game::user_info_lite* enter_room_ack::_internal_mutable_opponent() {
  
  if (_impl_.opponent_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::user_info_lite>(GetArenaForAllocation());
    _impl_.opponent_ = p;
  }
  return _impl_.opponent_;
}
inline ::game::user_info_lite* enter_room_ack::mutable_opponent() {
  ::game::user_info_lite* _msg = _internal_mutable_opponent();
  // @@protoc_insertion_point(field_mutable:game.enter_room_ack.opponent)
  return _msg;
}
inline void enter_room_ack::set_allocated_opponent(::game::user_info_lite* opponent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.opponent_;
  }
  if (opponent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(opponent);
    if (message_arena != submessage_arena) {
      opponent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opponent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.opponent_ = opponent;
  // @@protoc_insertion_point(field_set_allocated:game.enter_room_ack.opponent)
}

// repeated uint32 white = 5;
inline int enter_room_ack::_internal_white_size() const {
  return _impl_.white_.size();
}
inline int enter_room_ack::white_size() const {
  return _internal_white_size();
}
inline void enter_room_ack::clear_white() {
  _impl_.white_.Clear();
}
inline uint32_t enter_room_ack::_internal_white(int index) const {
  return _impl_.white_.Get(index);
}
inline uint32_t enter_room_ack::white(int index) const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.white)
  return _internal_white(index);
}
inline void enter_room_ack::set_white(int index, uint32_t value) {
  _impl_.white_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.enter_room_ack.white)
}
inline void enter_room_ack::_internal_add_white(uint32_t value) {
  _impl_.white_.Add(value);
}
inline void enter_room_ack::add_white(uint32_t value) {
  _internal_add_white(value);
  // @@protoc_insertion_point(field_add:game.enter_room_ack.white)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
enter_room_ack::_internal_white() const {
  return _impl_.white_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
enter_room_ack::white() const {
  // @@protoc_insertion_point(field_list:game.enter_room_ack.white)
  return _internal_white();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
enter_room_ack::_internal_mutable_white() {
  return &_impl_.white_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
enter_room_ack::mutable_white() {
  // @@protoc_insertion_point(field_mutable_list:game.enter_room_ack.white)
  return _internal_mutable_white();
}

// repeated uint32 black = 6;
inline int enter_room_ack::_internal_black_size() const {
  return _impl_.black_.size();
}
inline int enter_room_ack::black_size() const {
  return _internal_black_size();
}
inline void enter_room_ack::clear_black() {
  _impl_.black_.Clear();
}
inline uint32_t enter_room_ack::_internal_black(int index) const {
  return _impl_.black_.Get(index);
}
inline uint32_t enter_room_ack::black(int index) const {
  // @@protoc_insertion_point(field_get:game.enter_room_ack.black)
  return _internal_black(index);
}
inline void enter_room_ack::set_black(int index, uint32_t value) {
  _impl_.black_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.enter_room_ack.black)
}
inline void enter_room_ack::_internal_add_black(uint32_t value) {
  _impl_.black_.Add(value);
}
inline void enter_room_ack::add_black(uint32_t value) {
  _internal_add_black(value);
  // @@protoc_insertion_point(field_add:game.enter_room_ack.black)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
enter_room_ack::_internal_black() const {
  return _impl_.black_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
enter_room_ack::black() const {
  // @@protoc_insertion_point(field_list:game.enter_room_ack.black)
  return _internal_black();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
enter_room_ack::_internal_mutable_black() {
  return &_impl_.black_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
enter_room_ack::mutable_black() {
  // @@protoc_insertion_point(field_mutable_list:game.enter_room_ack.black)
  return _internal_mutable_black();
}

// -------------------------------------------------------------------

// move_req

// uint32 x = 1;
inline void move_req::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t move_req::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t move_req::x() const {
  // @@protoc_insertion_point(field_get:game.move_req.x)
  return _internal_x();
}
inline void move_req::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void move_req::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:game.move_req.x)
}

// uint32 y = 2;
inline void move_req::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t move_req::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t move_req::y() const {
  // @@protoc_insertion_point(field_get:game.move_req.y)
  return _internal_y();
}
inline void move_req::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void move_req::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:game.move_req.y)
}

// -------------------------------------------------------------------

// move_ack

// .game.ack_result result = 1;
inline bool move_ack::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool move_ack::has_result() const {
  return _internal_has_result();
}
inline const ::game::ack_result& move_ack::_internal_result() const {
  const ::game::ack_result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ack_result&>(
      ::game::_ack_result_default_instance_);
}
inline const ::game::ack_result& move_ack::result() const {
  // @@protoc_insertion_point(field_get:game.move_ack.result)
  return _internal_result();
}
inline void move_ack::unsafe_arena_set_allocated_result(
    ::game::ack_result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.move_ack.result)
}
inline ::game::ack_result* move_ack::release_result() {
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::ack_result* move_ack::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:game.move_ack.result)
  
  ::game::ack_result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::game::ack_result* move_ack::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ack_result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::game::ack_result* move_ack::mutable_result() {
  ::game::ack_result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:game.move_ack.result)
  return _msg;
}
inline void move_ack::set_allocated_result(::game::ack_result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:game.move_ack.result)
}

// .game.game_result game = 2;
inline void move_ack::clear_game() {
  _impl_.game_ = 0;
}
inline ::game::game_result move_ack::_internal_game() const {
  return static_cast< ::game::game_result >(_impl_.game_);
}
inline ::game::game_result move_ack::game() const {
  // @@protoc_insertion_point(field_get:game.move_ack.game)
  return _internal_game();
}
inline void move_ack::_internal_set_game(::game::game_result value) {
  
  _impl_.game_ = value;
}
inline void move_ack::set_game(::game::game_result value) {
  _internal_set_game(value);
  // @@protoc_insertion_point(field_set:game.move_ack.game)
}

// -------------------------------------------------------------------

// move_brd

// uint32 x = 1;
inline void move_brd::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t move_brd::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t move_brd::x() const {
  // @@protoc_insertion_point(field_get:game.move_brd.x)
  return _internal_x();
}
inline void move_brd::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void move_brd::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:game.move_brd.x)
}

// uint32 y = 2;
inline void move_brd::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t move_brd::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t move_brd::y() const {
  // @@protoc_insertion_point(field_get:game.move_brd.y)
  return _internal_y();
}
inline void move_brd::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void move_brd::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:game.move_brd.y)
}

// .game.game_result game = 3;
inline void move_brd::clear_game() {
  _impl_.game_ = 0;
}
inline ::game::game_result move_brd::_internal_game() const {
  return static_cast< ::game::game_result >(_impl_.game_);
}
inline ::game::game_result move_brd::game() const {
  // @@protoc_insertion_point(field_get:game.move_brd.game)
  return _internal_game();
}
inline void move_brd::_internal_set_game(::game::game_result value) {
  
  _impl_.game_ = value;
}
inline void move_brd::set_game(::game::game_result value) {
  _internal_set_game(value);
  // @@protoc_insertion_point(field_set:game.move_brd.game)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::game_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::game_result>() {
  return ::game::game_result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fclient_2eproto
