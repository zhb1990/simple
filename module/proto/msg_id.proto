syntax = "proto3";

package game;

// 定义所有的消息id

/// 0x0xxx :客户端请求服务器
/// 0x1xxx :服务器回复客户端
/// 0x2xxx :客户端提交给服务器，无需返回
/// 0x3xxx :服务器推送给客户端
/// 0x4xxx :服务器内部请求
/// 0x5xxx :服务器内部回复
/// 0x6xxx :服务器内部推送

enum message_type {
  msg_c2s_req = 0;           // 客户端请求服务器
  msg_s2c_ack = 0x1000;      // 服务器回复客户端请求
  msg_c2s_brd = 0x2000;      // 客户端通知服务器
  msg_s2c_brd = 0x3000;      // 服务器通知客户端
  msg_s2s_req = 0x4000;      // 服务器请求服务器
  msg_s2s_ack = 0x5000;      // 服务器回复服务器请求
  msg_s2s_brd = 0x6000;      // 服务器通知服务器

  msg_mask = 0xf000;
}

enum message_id {
  id_none = 0;
  //===========================================================
  //                 client <-> server 消息定义
  //===========================================================
  id_ping_req = 0x0001;
  id_ping_ack = 0x1001;

  // 登录注册
  id_login_req = 0x0002;
  id_login_ack = 0x1002;

  // 先不加重连协议

  // 匹配
  id_match_req = 0x0003;
  id_match_ack = 0x1003;

  // 进入棋局
  id_enter_room_req = 0x0004;
  id_enter_room_ack = 0x1004;

  // 落子
  id_move_req = 0x0005;
  id_move_ack = 0x1005;
  id_move_brd = 0x3005;

  //===========================================================
  //                 server <-> server 消息定义
  //===========================================================

  // ping
  id_s_ping_req = 0x4001;
  id_s_ping_ack = 0x5001;

  // gate向gate master注册
  id_s_gate_register_req = 0x4002;
  id_s_gate_register_ack = 0x5002;
  id_s_gate_register_brd = 0x6002;

  // 同一个机器上的其他服务向gate注册
  id_s_service_register_req = 0x4003;
  id_s_service_register_ack = 0x5003;

  // 其他服务向gate注册时，gate向gate master 验证
  // 简化逻辑，暂时设定成 注册后不能更改到其他的gate上
  id_s_service_update_req = 0x4004;
  id_s_service_update_ack = 0x5004;

  // 通过 gate 转发消息 （一台机器的gate服务向其他机器的gate发送）
  id_s_gate_forward_brd = 0x6005;

  // 订阅特定类型的所有服务在线状态
  id_s_service_subscribe_req = 0x4006;
  id_s_service_subscribe_ack = 0x5006;
  id_s_service_subscribe_brd = 0x6006;

  // 客户端发来的消息包装
  id_s_client_forward_brd = 0x6007;

  // 踢掉客户端
  id_s_kick_client_req = 0x4008;
  id_s_kick_client_ack = 0x5008;

  // 客户端网络断开
  id_s_client_offline_brd = 0x6009;

  // 服务器内部账号登录协议
  id_s_login_req = 0x400a;
  id_s_login_ack = 0x500a;

  // 玩家登录逻辑服协议
  id_s_login_logic_req = 0x400b;
  id_s_login_logic_ack = 0x500b;

  // 给玩家分配逻辑服
  id_s_get_logic_req = 0x400c;
  id_s_get_logic_ack = 0x500c;

  // 创建玩家数据
  id_s_db_create_user_req = 0x400d;
  id_s_db_create_user_ack = 0x500d;

  // 查询玩家数据
  id_s_db_query_user_req = 0x400e;
  id_s_db_query_user_ack = 0x500e;

  // 更新玩家数据，因为数据可能会分批完成，因此不定义成请求回复的模式
  // db_proxy 收到的是要写入db的数据，logic 收到的是写入成功的数据
  // 如果要区分，可以定义成2个协议id
  id_s_db_update_user_brd = 0x600f;

  // 查询账号数据（账号 密码）
  id_s_db_query_account_req = 0x4010;
  id_s_db_query_account_ack = 0x5010;

  // 更新账号数据（同 id_s_db_update_user_brd）
  id_s_db_update_account_brd = 0x6011;

  // 查询最大的userid
  id_s_db_query_max_userid_req = 0x4012;
  id_s_db_query_max_userid_ack = 0x5012;

  // 查询所有的ai
  id_s_db_query_ai_req = 0x4013;
  id_s_db_query_ai_ack = 0x5013;
}
